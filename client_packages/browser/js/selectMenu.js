var selectMenu = new Vue({
    el: "#selectMenu",
    data: {
        show: false,
        // Текущее меню
        menu: null,
        // Макс. количество пунктов на экране
        maxItems: 5,
        // Макс. количество цветов в селекторе
        maxColorValues: 10,
        // Доступные структуры меню для использования
        menus: {
            /// characterInit
            /// Меню для создания персоонажа
            "characterCreateMainMenu": {
                name: "charactercreatemain",
                header: "Главное меню", // заголовок меню, видимый на экране
                items: [{
                        text: "Пол",
                        values: ["Мужской", "Женский"],
                        i: 0
                    },
                    {
                        text: "Наследственность",
                    },
                    {
                        text: "Внешность",
                    },
                    {
                        text: "Сохранить и продолжить",
                    },
                    {
                        text: "Сбросить все изменения",
                    },
                    {
                        text: "Выйти без сохранения",
                    }
                ],
                i: 0, // индекс выбранного пункта
                j: 0, // индекс первого видимого пункта
                handler(eventName) { // обработчик взаимодействия с меню
                    var item = this.items[this.i];
                    var e = {
                        menuName: this.name, // название меню
                        itemName: item.text, // текст пункта меню
                        itemIndex: this.i, // индекс пункта меню
                        itemValue: (item.i != null && item.values) ? item.values[item.i] : null, // значение пункта меню
                        valueIndex: item.i, // индекс значения пункта меню
                    };
                    if (eventName == "onItemValueChanged" && e.itemName == "Пол") {
                        selectMenu.menus["characterCreateMainMenu"].items[0].i = e.valueIndex;
                        selectMenu.menus["characterCreateParentsMenu"].items[2].i = e.valueIndex == 0 ? 0 : 4;
                        mp.trigger('characterInit.create.setGender', e.valueIndex);
                    }
                    if (eventName == "onEscapePressed") {
                        selectMenu.menu = selectMenu.menus["characterCreateExitMenu"];
                    }
                    if (eventName == "onItemSelected") {
                        switch (e.itemName) {
                            case "Наследственность":
                                selectMenu.menu = selectMenu.menus["characterCreateParentsMenu"];
                                break;
                            case "Внешность":
                                var sex = selectMenu.menus["characterCreateMainMenu"].items[0].i;
                                var menu = selectMenu.menus["characterCreateViewMenu"];
                                menu.items = (sex == 0) ? menu.itemsMale : menu.itemsFemale;
                                selectMenu.menu = menu;
                                break;
                            case "Сохранить и продолжить":
                                mp.trigger('characterInit.create.continue');
                                selectMenu.menu = selectMenu.menus["characterCreateNameMenu"];
                                break;
                            case "Сбросить все изменения":
                                //selectMenu.menu = selectMenu.menus["characterCreateResetMenu"];
                                break;
                            case "Выйти без сохранения":
                                //selectMenu.menu = selectMenu.menus["characterCreateExitMenu"];
                                break;
                        }
                    }
                }
            },
            "characterCreateParentsMenu": {
                name: "charactercreateparents",
                header: "Наследственность", // заголовок меню, видимый на экране
                items: [{
                        text: "Мать",
                        values: ["Ханна", "Обри", "Жасмин", "Жизель", "Амелия", "Изабелла", "Зоуи", "Ава", "Камила", "Вайолет", "София", "Эвелин", "Николь", "Эшли", "Грейси", "Брианна", "Натали", "Оливия", "Элизабет", "Шарлотта", "Эмма", "Мисти"],
                        i: 0
                    },
                    {
                        text: "Отец",
                        values: ["Бенджамин", "Дэниэл", "Джошуа", "Ной", "Эндрю", "Хуан", "Алекс", "Айзек", "Эван", "Итан", "Винсент", "Энджел", "Диего", "Адриан", "Габриэль", "Майкл", "Сантьяго", "Кевин", "Луи", "Сэмюэль", "Энтони", "Клод", "Нико", "Джон"],
                        i: 0
                    },
                    {
                        text: "Сходство",
                        values: ["100% с папой", "75% с папой", "50%", "75% с мамой", "100% с мамой"],
                        i: 0
                    },
                    {
                        text: "Цвет кожи",
                        values: ['#e0c2aa', '#804e40', '#a1765a', '#ebad69', '#cb7d50', '#c47f5b'],
                        i: 0,
                        j: 0
                    },
                    {
                        text: "Назад",
                    },
                ],
                i: 0, // индекс выбранного пункта
                j: 0, // индекс первого видимого пункта
                handler(eventName) { // обработчик взаимодействия с меню
                    var item = this.items[this.i];
                    var e = {
                        menuName: this.name, // название меню
                        itemName: item.text, // текст пункта меню
                        itemIndex: this.i, // индекс пункта меню
                        itemValue: (item.i != null && item.values) ? item.values[item.i] : null, // значение пункта меню
                        valueIndex: item.i, // индекс значения пункта меню
                    };
                    if (eventName == "onEscapePressed") {
                        selectMenu.menu = selectMenu.menus["characterCreateMainMenu"];
                    }
                    if (eventName == "onItemValueChanged") {
                        switch (e.itemName) {
                            case "Мать":
                                let mothers = [21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 45];
                                mp.trigger('characterInit.create.setMother', mothers[e.valueIndex]);
                                break;
                            case "Отец":
                                let fathers = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 42, 43, 44];
                                mp.trigger('characterInit.create.setFather', fathers[e.valueIndex]);
                                break;
                            case "Сходство":
                                let sim = [100, 75, 50, 25, 0];
                                mp.trigger('characterInit.create.setSimilarity', sim[e.valueIndex]);
                                break;
                            case "Цвет кожи":
                                let col = [0, 2, 4, 6, 8, 10];
                                mp.trigger('characterInit.create.setSkin', col[e.valueIndex]);
                                break;
                        }
                    }
                    if (eventName == "onItemSelected") {
                        switch (e.itemName) {
                            case "Назад":
                                selectMenu.menu = selectMenu.menus["characterCreateMainMenu"];
                                break;
                        }
                    }
                }
            },
            "characterCreateViewMenu": {
                name: "charactercreateview",
                header: "Внешность", // заголовок меню, видимый на экране
                itemsMale: [{
                        text: "Прическа",
                        values: [
                            "Под ноль", "Коротко", "Ястреб", "Хипстер", "Челка набок", "Коротко", "Байкер", "Хвост", "Косички", "Прилиза",
                            "Коротко", "Шипы", "Цезарь", "Чоппи", "Дреды", "Длинные", "Лохматый", "Серфингист", "Набок",
                            "Зализ", "Длинные", "Юный хипстер", "Муллет", "Косички", "Пальма", "Молния", "Уиппед", "Зиг-заг", "Снейл", "Хайтоп", "Откинутые",
                            "Андеркат", "Боковой андер", "Колючий ирокез", "Мод", "Слоями", "Флэттоп", "Армеец"
                        ],
                        i: 0
                    },
                    {
                        text: "Цвет волос",
                        values: ["#211f1c", "#55362f", "#4b382e", "#4d291b",
                            "#70351e", "#904422", "#a55c36", "#a56944",
                            "#ac744f", "#ae7d57", "#be9161", "#cda670",
                            "#c8a370", "#d5a861", "#e0b775", "#e8c487",
                            "#b78457", "#a85d3d", "#963523", "#7c1411",
                            "#921812", "#a81c14", "#cb371e", "#de411b",
                            "#be532f", "#d34d21", "#907867", "#a78e7a",
                            "#d4bda9", "#e4cfbe"
                        ],
                        i: 0,
                        j: 0
                    },
                    {
                        text: "Дополнительный цвет волос",
                        values: ["#211f1c", "#55362f", "#4b382e", "#4d291b",
                            "#70351e", "#904422", "#a55c36", "#a56944",
                            "#ac744f", "#ae7d57", "#be9161", "#cda670",
                            "#c8a370", "#d5a861", "#e0b775", "#e8c487",
                            "#b78457", "#a85d3d", "#963523", "#7c1411",
                            "#921812", "#a81c14", "#cb371e", "#de411b",
                            "#be532f", "#d34d21", "#907867", "#a78e7a",
                            "#d4bda9", "#e4cfbe"
                        ],
                        i: 0,
                        j: 0
                    },
                    {
                        text: "Волосы на лице",
                        values: ["Нет", "Легкая щетина", "Бальбоа", "Круглая борода", "Эспаньолка", "Козлиная бородка", "Островок", "Тонкая бородка", "Неряха", "Мушкетер", "Усы", "Ухоженная борода", "Щетина", "Тонкая бородка", "Подкова", "Карандаш", "Ремень", "Бальбо и баки", "Баки", "Неряшливая борода", "Дали", "Дали и борода", "Руль", "Фауст", "Англичанин", "Голливуд", "Фу Манчу", "Островок с баками", "Широкие баки", "Ширма"],
                        i: 0
                    },
                    {
                        text: "Цвет волос на лице",
                        values: ["#211f1c", "#55362f", "#4b382e", "#4d291b",
                            "#70351e", "#904422", "#a55c36", "#a56944",
                            "#ac744f", "#ae7d57", "#be9161", "#cda670",
                            "#c8a370", "#d5a861", "#e0b775", "#e8c487",
                            "#b78457", "#a85d3d", "#963523", "#7c1411",
                            "#921812", "#a81c14", "#cb371e", "#de411b",
                            "#be532f", "#d34d21", "#907867", "#a78e7a",
                            "#d4bda9", "#e4cfbe"
                        ],
                        i: 0,
                        j: 0
                    },
                    {
                        text: "Брови",
                        values: ["Нет", "Аккуратные", "Модные", "Клеопатра", "Ироничные", "Женственные", "Обольстительные", "Нахмуренные", "Чикса", "Триумф", "Беззаботные", "Дугой", "Мышка", "Двойная высечка", "Впалые", "Карандаш", "Выщипанные", "Прямые", "Естественные", "Пышные", "Неопрятные", "Широкие", "Обычные", "Южноевропейские", "Ухоженные", "Кустистые", "Перышки", "Колючки", "Монобровь", "Крылатые", "Тройная высечка", "Высечка дугой", "Подрезанные", "Сходящие на нет", "Высечка"],
                        i: 0
                    },
                    {
                        text: "Высота бровей",
                        values: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20],
                        i: 10,
                        min: "Выше", // слово слева от ползунка
                        max: "Ниже", // слово справа от ползунка
                    },
                    {
                        text: "Глубина бровей",
                        values: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20],
                        i: 10,
                        min: "Внутрь", // слово слева от ползунка
                        max: "Наружу", // слово справа от ползунка
                    },
                    {
                        text: "Цвет бровей",
                        values: ["#211f1c", "#55362f", "#4b382e", "#4d291b",
                            "#70351e", "#904422", "#a55c36", "#a56944",
                            "#ac744f", "#ae7d57", "#be9161", "#cda670",
                            "#c8a370", "#d5a861", "#e0b775", "#e8c487",
                            "#b78457", "#a85d3d", "#963523", "#7c1411",
                            "#921812", "#a81c14", "#cb371e", "#de411b",
                            "#be532f", "#d34d21", "#907867", "#a78e7a",
                            "#d4bda9", "#e4cfbe"
                        ],
                        i: 0,
                        j: 0
                    },
                    {
                        text: "Размер глаз",
                        values: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20],
                        i: 10,
                        min: "Шире", // слово слева от ползунка
                        max: "Уже", // слово справа от ползунка
                    },
                    {
                        text: "Цвет глаз",
                        values: ["#50c878", "#008000", "#add8e6", "#0077be", "#b5651d", "#654321", "#d0c383", "#a9a9a9"],
                        i: 0,
                        j: 0
                    },
                    {
                        text: "Глубина переносицы",
                        values: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20],
                        i: 10,
                        min: "Округлая", // слово слева от ползунка
                        max: "Впалая", // слово справа от ползунка
                    },
                    {
                        text: "Сдвиг переносицы",
                        values: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20],
                        i: 10,
                        min: "Левее", // слово слева от ползунка
                        max: "Правее", // слово справа от ползунка
                    },
                    {
                        text: "Высота расположения носа",
                        values: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20],
                        i: 10,
                        min: "Выше", // слово слева от ползунка
                        max: "Ниже", // слово справа от ползунка
                    },
                    {
                        text: "Ширина носа",
                        values: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20],
                        i: 10,
                        min: "Уже", // слово слева от ползунка
                        max: "Шире", // слово справа от ползунка
                    },
                    {
                        text: "Длина кончика носа",
                        values: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20],
                        i: 10,
                        min: "Больше", // слово слева от ползунка
                        max: "Меньше", // слово справа от ползунка
                    },
                    {
                        text: "Высота кончика носа",
                        values: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20],
                        i: 10,
                        min: "Выше", // слово слева от ползунка
                        max: "Ниже", // слово справа от ползунка
                    },
                    {
                        text: "Ширина скул",
                        values: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20],
                        i: 10,
                        min: "Уже", // слово слева от ползунка
                        max: "Шире", // слово справа от ползунка
                    },
                    {
                        text: "Глубина щек",
                        values: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20],
                        i: 10,
                        min: "Округлые", // слово слева от ползунка
                        max: "Впалые", // слово справа от ползунка
                    },
                    {
                        text: "Толщина губ",
                        values: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20],
                        i: 10,
                        min: "Шире", // слово слева от ползунка
                        max: "Уже", // слово справа от ползунка
                    },
                    {
                        text: "Форма челюсти",
                        values: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20],
                        i: 10,
                        min: "Меньше", // слово слева от ползунка
                        max: "Больше", // слово справа от ползунка
                    },
                    {
                        text: "Ширина челюсти",
                        values: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20],
                        i: 10,
                        min: "Уже", // слово слева от ползунка
                        max: "Шире", // слово справа от ползунка
                    },
                    {
                        text: "Высота подбородка",
                        values: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20],
                        i: 10,
                        min: "Выше", // слово слева от ползунка
                        max: "Ниже", // слово справа от ползунка
                    },
                    {
                        text: "Глубина подбородка",
                        values: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20],
                        i: 10,
                        min: "Короткий", // слово слева от ползунка
                        max: "Длинный", // слово справа от ползунка
                    },
                    {
                        text: "Ширина подбородка",
                        values: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20],
                        i: 10,
                        min: "Уже", // слово слева от ползунка
                        max: "Шире", // слово справа от ползунка
                    },
                    {
                        text: "Выступ подбородка",
                        values: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20],
                        i: 10,
                        min: "Наружу", // слово слева от ползунка
                        max: "Внутрь", // слово справа от ползунка
                    },
                    {
                        text: "Ширина шеи",
                        values: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20],
                        i: 10,
                        min: "Уже", // слово слева от ползунка
                        max: "Шире", // слово справа от ползунка
                    },
                    {
                        text: "Дефекты кожи",
                        values: ["Нет", "Корь", "Прыщи", "Пятна", "Сыпь", "Угри", "Налет", "Пустулы", "Прыщики", "Тяжелое акне", "Акне", "Сыпь на щеках", "Сыпь на лице", "Шрамы", "Пубертат", "Язва", "Сыпь на подбородке", "Два лица", "Зона Т", "Сальный", "Крапленый", "Следы акне", "Большие   шрамы", "Герпес", "Лишай"],
                        i: 0
                    },
                    {
                        text: "Старение кожи",
                        values: ["Нет", "Вороньи лапки", "Первые признаки", "Средний возраст", "Признаки старения", "Депрессия", "Преклонный возраст", "Старость", "Обветренная кожа", "Морщинистая кожа", "Обвислая кожа", "Тяжелая жизнь", "Винтаж", "Пенсионер", "Наркоман", "Старик"],
                        i: 0
                    },
                    {
                        text: "Повреждение кожи",
                        values: ["Нет", "Неровная", "Наждак", "Пятнистая", "Грубая", "Жесткая", "Шероховатая", "Загрубелая", "Неровная", "Со складками", "Потрескавшаяся", "Твердая"],
                        i: 0
                    },
                    {
                        text: "Родинки и веснушки",
                        values: ["Нет", "Ангел", "Повсюду", "Местами", "Единичные", "Переносица", "Куколка", "Фея", "Загорелая", "Родинки", "Ряд", "Модель", "Случайность", "Родинки", "Дождик", "Удвоенность", "Одна сторона", "Пары", "Бородавки"],
                        i: 0
                    },
                    {
                        text: "Волосы на теле",
                        values: ["Нет", "Естественные", "Полоса", "Дерево", "Волосатый", "Гризли", "Горилла", "Бритая горилла", "Бикини", "Удар молнии", "Обратная молния", "Сердце", "Боль в груди", "Счастливчик", "Череп", "Улитка", "Слизень", "Волосатые руки"],
                        i: 0
                    },
                    {
                        text: "Цвет волос на теле",
                        values: ["#211f1c", "#55362f", "#4b382e", "#4d291b",
                            "#70351e", "#904422", "#a55c36", "#a56944",
                            "#ac744f", "#ae7d57", "#be9161", "#cda670",
                            "#c8a370", "#d5a861", "#e0b775", "#e8c487",
                            "#b78457", "#a85d3d", "#963523", "#7c1411",
                            "#921812", "#a81c14", "#cb371e", "#de411b",
                            "#be532f", "#d34d21", "#907867", "#a78e7a",
                            "#d4bda9", "#e4cfbe"
                        ],
                        i: 0,
                        j: 0
                    },
                    {
                        text: "Назад",
                    },
                ],
                itemsFemale: [{
                        text: "Прическа",
                        values: [
                            "Под ноль", "Коротко", "Слои", "Косички", "Хвост", "Ирокез", "Косички", "Боб", "Ястреб", "Ракушка",
                            "Лонг боб", "Свободно", "Пикси", "Бритые виски", "Узел", "Волнистый боб", "Красотка", "Пучок", "Тугой узел",
                            "Твистед боб", "Флэппер боб", "Биг бэнгс", "Плетеные", "Муллет", "Косички", "Листья", "Зиг-заг",
                            "Пигтейл бэнгс", "Волнистые", "Катушка", "Завеса", "Откинутые", "Андеркат",
                            "Боковой андер", "Колючий ирокез", "Бандана", "Слоями", "Скинберд", "Аккуратные", "Шорт боб"
                        ],
                        i: 0
                    },
                    {
                        text: "Цвет волос",
                        values: ["#211f1c", "#55362f", "#4b382e", "#4d291b",
                            "#70351e", "#904422", "#a55c36", "#a56944",
                            "#ac744f", "#ae7d57", "#be9161", "#cda670",
                            "#c8a370", "#d5a861", "#e0b775", "#e8c487",
                            "#b78457", "#a85d3d", "#963523", "#7c1411",
                            "#921812", "#a81c14", "#cb371e", "#de411b",
                            "#be532f", "#d34d21", "#907867", "#a78e7a",
                            "#d4bda9", "#e4cfbe"
                        ],
                        i: 0,
                        j: 0
                    },
                    {
                        text: "Дополнительный цвет волос",
                        values: ["#211f1c", "#55362f", "#4b382e", "#4d291b",
                            "#70351e", "#904422", "#a55c36", "#a56944",
                            "#ac744f", "#ae7d57", "#be9161", "#cda670",
                            "#c8a370", "#d5a861", "#e0b775", "#e8c487",
                            "#b78457", "#a85d3d", "#963523", "#7c1411",
                            "#921812", "#a81c14", "#cb371e", "#de411b",
                            "#be532f", "#d34d21", "#907867", "#a78e7a",
                            "#d4bda9", "#e4cfbe"
                        ],
                        i: 0,
                        j: 0
                    },
                    {
                        text: "Брови",
                        values: ["Нет", "Аккуратные", "Модные", "Клеопатра", "Ироничные", "Женственные", "Обольстительные", "Нахмуренные", "Чикса", "Триумф", "Беззаботные", "Дугой", "Мышка", "Двойная высечка", "Впалые", "Карандаш", "Выщипанные", "Прямые", "Естественные", "Пышные", "Неопрятные", "Широкие", "Обычные", "Южноевропейские", "Ухоженные", "Кустистые", "Перышки", "Колючки", "Монобровь", "Крылатые", "Тройная высечка", "Высечка дугой", "Подрезанные", "Сходящие на нет", "Высечка"],
                        i: 0
                    },
                    {
                        text: "Высота бровей",
                        values: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20],
                        i: 10,
                        min: "Выше", // слово слева от ползунка
                        max: "Ниже", // слово справа от ползунка
                    },
                    {
                        text: "Глубина бровей",
                        values: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20],
                        i: 10,
                        min: "Внутрь", // слово слева от ползунка
                        max: "Наружу", // слово справа от ползунка
                    },
                    {
                        text: "Цвет бровей",
                        values: ["#211f1c", "#55362f", "#4b382e", "#4d291b",
                            "#70351e", "#904422", "#a55c36", "#a56944",
                            "#ac744f", "#ae7d57", "#be9161", "#cda670",
                            "#c8a370", "#d5a861", "#e0b775", "#e8c487",
                            "#b78457", "#a85d3d", "#963523", "#7c1411",
                            "#921812", "#a81c14", "#cb371e", "#de411b",
                            "#be532f", "#d34d21", "#907867", "#a78e7a",
                            "#d4bda9", "#e4cfbe"
                        ],
                        i: 0,
                        j: 0
                    },
                    {
                        text: "Размер глаз",
                        values: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20],
                        i: 10,
                        min: "Шире", // слово слева от ползунка
                        max: "Уже", // слово справа от ползунка
                    },
                    {
                        text: "Цвет глаз",
                        values: ["#50c878", "#008000", "#add8e6", "#0077be", "#b5651d", "#654321", "#d0c383", "#a9a9a9"],
                        i: 0,
                        j: 0
                    },
                    {
                        text: "Глубина переносицы",
                        values: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20],
                        i: 10,
                        min: "Округлая", // слово слева от ползунка
                        max: "Впалая", // слово справа от ползунка
                    },
                    {
                        text: "Сдвиг переносицы",
                        values: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20],
                        i: 10,
                        min: "Левее", // слово слева от ползунка
                        max: "Правее", // слово справа от ползунка
                    },
                    {
                        text: "Высота расположения носа",
                        values: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20],
                        i: 10,
                        min: "Выше", // слово слева от ползунка
                        max: "Ниже", // слово справа от ползунка
                    },
                    {
                        text: "Ширина носа",
                        values: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20],
                        i: 10,
                        min: "Уже", // слово слева от ползунка
                        max: "Шире", // слово справа от ползунка
                    },
                    {
                        text: "Длина кончика носа",
                        values: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20],
                        i: 10,
                        min: "Больше", // слово слева от ползунка
                        max: "Меньше", // слово справа от ползунка
                    },
                    {
                        text: "Высота кончика носа",
                        values: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20],
                        i: 10,
                        min: "Выше", // слово слева от ползунка
                        max: "Ниже", // слово справа от ползунка
                    },
                    {
                        text: "Ширина скул",
                        values: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20],
                        i: 10,
                        min: "Уже", // слово слева от ползунка
                        max: "Шире", // слово справа от ползунка
                    },
                    {
                        text: "Глубина щек",
                        values: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20],
                        i: 10,
                        min: "Округлые", // слово слева от ползунка
                        max: "Впалые", // слово справа от ползунка
                    },
                    {
                        text: "Толщина губ",
                        values: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20],
                        i: 10,
                        min: "Шире", // слово слева от ползунка
                        max: "Уже", // слово справа от ползунка
                    },
                    {
                        text: "Помада",
                        values: ["Нет", "Цветная матовая", "Цветной блеск", "Матовая линия", "Блестящая линия", "Сильная матовая", "Сильный блеск", "Голая матовая", "Голый блеск", "Нечеткая", "Гейша"],
                        i: 0
                    },
                    {
                        text: "Цвет помады",
                        values: ["#211f1c", "#55362f", "#4b382e", "#4d291b",
                            "#70351e", "#904422", "#a55c36", "#a56944",
                            "#ac744f", "#ae7d57", "#be9161", "#cda670",
                            "#c8a370", "#d5a861", "#e0b775", "#e8c487",
                            "#b78457", "#a85d3d", "#963523", "#7c1411",
                            "#921812", "#a81c14", "#cb371e", "#de411b",
                            "#be532f", "#d34d21", "#907867", "#a78e7a",
                            "#d4bda9", "#e4cfbe", "#775262", "#8f5973",
                            "#ad4a6b", "#f845cc", "#fc5794", "#f9a1b2",
                            "#09a497", "#08828e", "#084e7c", "#63a15a",
                            "#379665", "#25705d", "#bec22f", "#9ab516",
                            "#61a526", "#e8bd56", "#f2c20e", "#f2980e",
                            "#fc8b14", "#f76415", "#fe771c", "#f1501f",
                            "#ef3c17", "#c81414", "#9b0a0e", "#291a14",
                            "#3f241c", "#502c1e", "#47271d", "#4d2c1f",
                            "#39251c", "#080a0e", "#ad8d67", "#c59762"
                        ],
                        i: 0,
                        j: 0
                    },
                    {
                        text: "Форма челюсти",
                        values: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20],
                        i: 10,
                        min: "Меньше", // слово слева от ползунка
                        max: "Больше", // слово справа от ползунка
                    },
                    {
                        text: "Ширина челюсти",
                        values: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20],
                        i: 10,
                        min: "Уже", // слово слева от ползунка
                        max: "Шире", // слово справа от ползунка
                    },
                    {
                        text: "Высота подбородка",
                        values: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20],
                        i: 10,
                        min: "Выше", // слово слева от ползунка
                        max: "Ниже", // слово справа от ползунка
                    },
                    {
                        text: "Глубина подбородка",
                        values: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20],
                        i: 10,
                        min: "Короткий", // слово слева от ползунка
                        max: "Длинный", // слово справа от ползунка
                    },
                    {
                        text: "Ширина подбородка",
                        values: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20],
                        i: 10,
                        min: "Уже", // слово слева от ползунка
                        max: "Шире", // слово справа от ползунка
                    },
                    {
                        text: "Выступ подбородка",
                        values: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20],
                        i: 10,
                        min: "Наружу", // слово слева от ползунка
                        max: "Внутрь", // слово справа от ползунка
                    },
                    {
                        text: "Ширина шеи",
                        values: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20],
                        i: 10,
                        min: "Уже", // слово слева от ползунка
                        max: "Шире", // слово справа от ползунка
                    },
                    {
                        text: "Дефекты кожи",
                        values: ["Нет", "Корь", "Прыщи", "Пятна", "Сыпь", "Угри", "Налет", "Пустулы", "Прыщики", "Тяжелое акне", "Акне", "Сыпь на щеках", "Сыпь на лице", "Шрамы", "Пубертат", "Язва", "Сыпь на подбородке", "Два лица", "Зона Т", "Сальный", "Крапленый", "Следы акне", "Большие   шрамы", "Герпес", "Лишай"],
                        i: 0
                    },
                    {
                        text: "Старение кожи",
                        values: ["Нет", "Вороньи лапки", "Первые признаки", "Средний возраст", "Признаки старения", "Депрессия", "Преклонный возраст", "Старость", "Обветренная кожа", "Морщинистая кожа", "Обвислая кожа", "Тяжелая жизнь", "Винтаж", "Пенсионер", "Наркоман", "Старик"],
                        i: 0
                    },
                    {
                        text: "Повреждение кожи",
                        values: ["Нет", "Неровная", "Наждак", "Пятнистая", "Грубая", "Жесткая", "Шероховатая", "Загрубелая", "Неровная", "Со складками", "Потрескавшаяся", "Твердая"],
                        i: 0
                    },
                    {
                        text: "Родинки и веснушки",
                        values: ["Нет", "Ангел", "Повсюду", "Местами", "Единичные", "Переносица", "Куколка", "Фея", "Загорелая", "Родинки", "Ряд", "Модель", "Случайность", "Родинки", "Дождик", "Удвоенность", "Одна сторона", "Пары", "Бородавки"],
                        i: 0
                    },
                    {
                        text: "Назад",
                    },
                ],
                items: null,
                i: 0, // индекс выбранного пункта
                j: 0, // индекс первого видимого пункта
                handler(eventName) { // обработчик взаимодействия с меню
                    var item = this.items[this.i];
                    var e = {
                        menuName: this.name, // название меню
                        itemName: item.text, // текст пункта меню
                        itemIndex: this.i, // индекс пункта меню
                        itemValue: (item.i != null && item.values) ? item.values[item.i] : null, // значение пункта меню
                        valueIndex: item.i, // индекс значения пункта меню
                    };
                    if (eventName == "onEscapePressed") {
                        selectMenu.menu = selectMenu.menus["characterCreateMainMenu"];
                    }
                    if (eventName == "onItemValueChanged") {
                        switch (e.itemName) {
                            case "Прическа":
                                mp.trigger('characterInit.create.setHairstyle', e.valueIndex);
                                break;
                            case "Цвет волос":
                                mp.trigger('characterInit.create.setHairColor', e.valueIndex);
                                break;
                            case "Дополнительный цвет волос":
                                mp.trigger('characterInit.create.setHairHighlightColor', e.valueIndex);
                                break;
                            case "Волосы на лице":
                                mp.trigger('characterInit.create.setFacialHair', e.valueIndex);
                                break;
                            case "Цвет волос на лице":
                                mp.trigger('characterInit.create.setFacialHairColor', e.valueIndex);
                                break;
                            case "Брови":
                                mp.trigger('characterInit.create.setEyebrows', e.valueIndex);
                                break;
                            case "Высота бровей":
                                mp.trigger('characterInit.create.setBrowHeight', e.valueIndex);
                                break;
                            case "Глубина бровей":
                                mp.trigger('characterInit.create.setBrowDepth', e.valueIndex);
                                break;
                            case "Цвет бровей":
                                mp.trigger('characterInit.create.setEyebrowColor', e.valueIndex);
                                break;
                            case "Размер глаз":
                                mp.trigger('characterInit.create.setEyeSize', e.valueIndex);
                                break;
                            case "Цвет глаз":
                                mp.trigger('characterInit.create.setEyeColor', e.valueIndex);
                                break;
                            case "Глубина переносицы":
                                mp.trigger('characterInit.create.setNoseBridgeDepth', e.valueIndex);
                                break;
                            case "Сдвиг переносицы":
                                mp.trigger('characterInit.create.setNoseBroken', e.valueIndex);
                                break;
                            case "Высота расположения носа":
                                mp.trigger('characterInit.create.setNoseBottomHeight', e.valueIndex);
                                break;
                            case "Ширина носа":
                                mp.trigger('characterInit.create.setNoseWidth', e.valueIndex);
                                break;
                            case "Длина кончика носа":
                                mp.trigger('characterInit.create.setNoseTipLength', e.valueIndex);
                                break;
                            case "Высота кончика носа":
                                mp.trigger('characterInit.create.setNoseTipHeight', e.valueIndex);
                                break;
                            case "Ширина скул":
                                mp.trigger('characterInit.create.setCheekboneWidth', e.valueIndex);
                                break;
                            case "Глубина щек":
                                mp.trigger('characterInit.create.setCheekDepth', e.valueIndex);
                                break;
                            case "Толщина губ":
                                mp.trigger('characterInit.create.setLipThickness', e.valueIndex);
                                break;
                            case "Помада":
                                mp.trigger('characterInit.create.setLipstick', e.valueIndex);
                                break;
                            case "Цвет помады":
                                mp.trigger('characterInit.create.setLipstickColor', e.valueIndex);
                                break;
                            case "Форма челюсти":
                                mp.trigger('characterInit.create.setJawShape', e.valueIndex);
                                break;
                            case "Ширина челюсти":
                                mp.trigger('characterInit.create.setJawWidth', e.valueIndex);
                                break;
                            case "Высота подбородка":
                                mp.trigger('characterInit.create.setChinHeight', e.valueIndex);
                                break;
                            case "Глубина подбородка":
                                mp.trigger('characterInit.create.setChinDepth', e.valueIndex);
                                break;
                            case "Ширина подбородка":
                                mp.trigger('characterInit.create.setChinWidth', e.valueIndex);
                                break;
                            case "Выступ подбородка":
                                mp.trigger('characterInit.create.setChinIndent', e.valueIndex);
                                break;
                            case "Ширина шеи":
                                mp.trigger('characterInit.create.setNeckWidth', e.valueIndex);
                                break;
                            case "Дефекты кожи":
                                mp.trigger('characterInit.create.setBlemishes', e.valueIndex);
                                break;
                            case "Старение кожи":
                                mp.trigger('characterInit.create.setAgeing', e.valueIndex);
                                break;
                            case "Повреждение кожи":
                                mp.trigger('characterInit.create.setSunDamage', e.valueIndex);
                                break;
                            case "Родинки и веснушки":
                                mp.trigger('characterInit.create.setMolesFreckles', e.valueIndex);
                                break;
                            case "Волосы на теле":
                                mp.trigger('characterInit.create.setChestHair', e.valueIndex, true);
                                break;
                            case "Цвет волос на теле":
                                mp.trigger('characterInit.create.setChestHairColor', e.valueIndex, true);
                                break;
                        }
                    }
                    if (eventName == "onItemSelected") {
                        switch (e.itemName) {
                            case "Назад":
                                selectMenu.menu = selectMenu.menus["characterCreateMainMenu"];
                                break;
                        }
                    }
                }
            },
            "characterCreateNameMenu": {
                name: "charactercreatename",
                header: "Имя персоонажа", // заголовок меню, видимый на экране
                items: [{
                        text: "Имя",
                        values: [""],
                        i: 0,
                        type: "editable" // возможность редактирования значения пункта меню
                    },
                    {
                        text: "Фамилия",
                        values: [""],
                        i: 0,
                        type: "editable" // возможность редактирования значения пункта меню
                    },
                    {
                        text: "Принять",
                    },
                    {
                        text: "Назад",
                    },
                ],
                i: 0, // индекс выбранного пункта
                j: 0, // индекс первого видимого пункта
                handler(eventName) { // обработчик взаимодействия с меню
                    var item = this.items[this.i];
                    var e = {
                        menuName: this.name, // название меню
                        itemName: item.text, // текст пункта меню
                        itemIndex: this.i, // индекс пункта меню
                        itemValue: (item.i != null && item.values) ? item.values[item.i] : null, // значение пункта меню
                        valueIndex: item.i, // индекс значения пункта меню
                    };
                    if (eventName == "onEscapePressed") {
                        mp.trigger('characterInit.create.back');
                        selectMenu.menu = selectMenu.menus["characterCreateMainMenu"];
                    }
                    if (eventName == "onItemSelected") {
                        switch (e.itemName) {
                            case "Принять":
                                let reg = /^[A-z]{2,15}$/;
                                if (!reg.test(this.items[0].values[0]) || !reg.test(this.items[1].values[0])) return selectMenu.notification = "Имя и фамилия должны состоять из 2-15 латинских букв каждое.";
                                selectMenu.loader = true;
                                let name = this.items[0].values[0];
                                let surname = this.items[1].values[0];
                                name = name[0].toUpperCase() + name.toLowerCase().substring(1, 20);
                                surname = surname[0].toUpperCase() + surname.toLowerCase().substring(1, 20);
                                mp.trigger('characterInit.create.check', name, surname);
                                break;
                            case "Назад":
                                mp.trigger('characterInit.create.back');
                                selectMenu.menu = selectMenu.menus["characterCreateMainMenu"];
                                break;
                        }
                    }
                }
            },
            "characterCreateResetMenu": {
                name: "charactercreatereset",
                header: "Сбросить все изменения?", // заголовок меню, видимый на экране
                items: [{
                        text: "Да",
                    },
                    {
                        text: "Нет",
                    },
                ],
                i: 0, // индекс выбранного пункта
                j: 0, // индекс первого видимого пункта
                handler(eventName) { // обработчик взаимодействия с меню
                    var item = this.items[this.i];
                    var e = {
                        menuName: this.name, // название меню
                        itemName: item.text, // текст пункта меню
                        itemIndex: this.i, // индекс пункта меню
                        itemValue: (item.i != null && item.values) ? item.values[item.i] : null, // значение пункта меню
                        valueIndex: item.i, // индекс значения пункта меню
                    };
                    if (eventName == "onEscapePressed") {
                        selectMenu.menu = selectMenu.menus["characterCreateMainMenu"];
                    }
                    if (eventName == "onItemSelected") {
                        switch (e.itemName) {
                            case "Да":
                                mp.trigger('characterInit.create.reset');
                                selectMenu.menu = selectMenu.menus["characterCreateMainMenu"];
                                break;
                            case "Нет":
                                selectMenu.menu = selectMenu.menus["characterCreateMainMenu"];
                                break;
                        }
                    }
                }
            },
            "characterCreateExitMenu": {
                name: "charactercreateexit",
                header: "Хотите выйти?", // заголовок меню, видимый на экране
                items: [{
                        text: "Да",
                    },
                    {
                        text: "Нет",
                    },
                ],
                i: 0, // индекс выбранного пункта
                j: 0, // индекс первого видимого пункта
                handler(eventName) { // обработчик взаимодействия с меню
                    var item = this.items[this.i];
                    var e = {
                        menuName: this.name, // название меню
                        itemName: item.text, // текст пункта меню
                        itemIndex: this.i, // индекс пункта меню
                        itemValue: (item.i != null && item.values) ? item.values[item.i] : null, // значение пункта меню
                        valueIndex: item.i, // индекс значения пункта меню
                    };
                    if (eventName == "onEscapePressed") {
                        selectMenu.menu = selectMenu.menus["characterCreateMainMenu"];
                    }
                    if (eventName == "onItemSelected") {
                        switch (e.itemName) {
                            case "Да":
                                mp.trigger('characterInit.create.exit');
                                selectMenu.show = false;
                                break;
                            case "Нет":
                                selectMenu.menu = selectMenu.menus["characterCreateMainMenu"];
                                break;
                        }
                    }
                }
            },
            /// КОНЕЦ меню для создания персоонажа
            /// ****************************************************************************************************************************************************************
            "parkingMenu": {
                name: "parking",
                header: "Парковка", // заголовок меню, видимый на экране
                items: [{
                        text: "Забрать транспорт",
                    },
                    {
                        text: "Закрыть меню",
                    }
                ],
                i: 0, // индекс выбранного пункта
                j: 0, // индекс первого видимого пункта
                handler(eventName) { // обработчик взаимодействия с меню
                    var item = this.items[this.i];
                    var e = {
                        menuName: this.name, // название меню
                        itemName: item.text, // текст пункта меню
                        itemIndex: this.i, // индекс пункта меню
                        itemValue: (item.i != null && item.values) ? item.values[item.i] : null, // значение пункта меню
                        valueIndex: item.i, // индекс значения пункта меню
                    };
                    if (eventName == 'onItemSelected') {
                        if (e.itemName == 'Забрать транспорт') {
                            mp.trigger(`parkings.vehicle.get`);
                        }
                        if (e.itemName == 'Закрыть меню') {
                            mp.trigger(`parkings.menu.close`);
                        }
                    }
                }
            },
            "carShowMenu": {
                name: "carshow",
                header: "Автосалон",
                items: [{
                        text: "Модель",
                        values: [],
                        i: 0,
                    },
                    {
                        text: "Основной цвет",
                        values: [],
                        i: 0,
                        j: 0
                    },
                    {
                        text: "Дополнительный цвет",
                        values: [],
                        i: 0,
                        j: 0
                    },
                    {
                        text: "Купить"
                    }
                ],
                i: 0, // индекс выбранного пункта
                j: 0, // индекс первого видимого пункта
                handler(eventName) { // обработчик взаимодействия с меню
                    var item = this.items[this.i];
                    var e = {
                        menuName: this.name, // название меню
                        itemName: item.text, // текст пункта меню
                        itemIndex: this.i, // индекс пункта меню
                        itemValue: (item.i != null && item.values) ? item.values[item.i] : null, // значение пункта меню
                        valueIndex: item.i, // индекс значения пункта меню
                    };
                    if (eventName == 'onItemValueChanged') {
                        if (e.itemName == 'Модель') {
                            mp.trigger(`carshow.vehicle.show`, e.valueIndex);
                        }
                        if (e.itemName == 'Основной цвет') {
                            mp.trigger(`carshow.vehicle.color`, e.valueIndex, -1);
                        }
                        if (e.itemName == 'Дополнительный цвет') {
                            mp.trigger(`carshow.vehicle.color`, -1, e.valueIndex);
                        }
                    }
                    if (eventName == 'onItemSelected') {
                        if (e.itemName == 'Купить') {
                            mp.trigger(`carshow.car.buy`);
                        }
                    }
                    if (eventName == 'onEscapePressed' || eventName == 'onBackspacePressed') {
                        mp.trigger(`carshow.list.close`);
                    }
                }
            },
            "carMarketSellMenu": {
                name: "carmarketsell",
                header: "Авторынок",
                items: [{
                        text: "Продать транспорт",
                        i: 0,
                    },
                    {
                        text: "Отмена",
                        i: 0,
                    }
                ],
                i: 0,
                j: 0,
                handler(eventName) {
                    var item = this.items[this.i];
                    var e = {
                        menuName: this.name,
                        itemName: item.text,
                        itemIndex: this.i,
                        itemValue: (item.i != null && item.values) ? item.values[item.i] : null,
                        valueIndex: item.i,
                    };
                    if (eventName == 'onItemSelected') {
                        if (e.itemName == 'Продать транспорт') {
                            mp.trigger(`carmarket.car.sell`);
                        }
                        if (e.itemName == 'Отмена') {
                            mp.trigger(`carmarket.sellmenu.close`);
                        }
                    }
                }
            },
            "carMarketBuyMenu": {
                name: "carmarketbuy",
                header: "Авторынок",
                items: [{
                        text: "Купить транспорт",
                        i: 0,
                    },
                    {
                        text: "Отмена",
                        i: 0,
                    }
                ],
                i: 0,
                j: 0,
                handler(eventName) {
                    var item = this.items[this.i];
                    var e = {
                        menuName: this.name,
                        itemName: item.text,
                        itemIndex: this.i,
                        itemValue: (item.i != null && item.values) ? item.values[item.i] : null,
                        valueIndex: item.i,
                    };
                    if (eventName == 'onItemSelected') {
                        if (e.itemName == 'Купить транспорт') {
                            mp.trigger(`carmarket.car.buy`);
                        }
                        if (e.itemName == 'Отмена') {
                            mp.trigger(`carmarket.buymenu.close`);
                        }
                    }
                }
            },
            "carServiceJobMenu": {
                name: "carservicejob",
                header: "Начальник СТО",
                items: [{
                        text: "Устроиться на работу",
                        i: 0,
                    },
                    // {
                    //     text: "Помощь", // TODO
                    //     i: 0,
                    // },
                    {
                        text: "Закрыть",
                        i: 0,
                    }
                ],
                i: 0,
                j: 0,
                handler(eventName) {
                    var item = this.items[this.i];
                    var e = {
                        menuName: this.name,
                        itemName: item.text,
                        itemIndex: this.i,
                        itemValue: (item.i != null && item.values) ? item.values[item.i] : null,
                        valueIndex: item.i,
                    };
                    if (eventName == 'onItemSelected') {
                        if (e.itemName == 'Устроиться на работу') {
                            mp.trigger(`carservice.jobshape.employment`);
                        }
                        if (e.itemName == 'Уволиться с работы') {
                            mp.trigger(`carservice.jobshape.employment`);
                        }
                        if (e.itemName == 'Закрыть') {
                            mp.trigger(`carservice.jobmenu.close`);
                        }
                    }
                }
            },
            "houseAddMenu": {
                name: "houseadd",
                header: "Добавление дома",
                items: [{
                        text: "Выберите интерьер",
                        values: [''],
                        i: 0,
                    },
                    {
                        text: "Введите стоимость",
                        values: [""],
                        type: "editable" // возможность редактирования значения пункта меню
                    },
                    {
                        text: "Поставить вход в дом",
                        values: ['No'],
                        i: 0,
                    },
                    {
                        text: "Поставить выход из дома",
                        values: ['No'],
                        i: 0,
                    },
                    {
                        text: "Создать авто",
                    },
                    {
                        text: "Создать место для парковки автомобиля",
                        values: ['No'],
                        i: 0,
                    },
                    {
                        text: "Создать",
                    },
                    {
                        text: "Закрыть",
                    }
                ],
                i: 0,
                j: 0,
                handler(eventName) {
                    var item = this.items[this.i];
                    var e = {
                        menuName: this.name,
                        itemName: item.text,
                        itemIndex: this.i,
                        itemValue: (item.i != null && item.values) ? item.values[item.i] : null,
                        valueIndex: item.i,
                    };
                    if (eventName == 'onItemSelected') {
                        switch (e.itemName) {
                            case "Поставить вход в дом":
                                mp.trigger("house.add.enter");
                                break;
                            case "Поставить выход из дома":
                                mp.trigger("house.add.spawn");
                                break;
                            case "Создать авто":
                                mp.trigger("house.add.carSpawn");
                                break;
                            case "Создать место для парковки автомобиля":
                                mp.trigger("house.add.carPlace");
                                break;
                            case "Создать":
                                mp.trigger("house.add.create", this.items[0].i, this.items[1].values[0]);
                                break;
                            case "Закрыть":
                                mp.trigger("house.add.close");
                                break;
                        }
                    }
                }
            },
            "houseAddInteriorMenu": {
                name: "houseaddinterior",
                header: "Добавление интерьера",
                items: [{
                        text: "Выберите гараж",
                        values: [''],
                        i: 0,
                    },
                    {
                        text: "Введите класс",
                        values: [""],
                        type: "editable" // возможность редактирования значения пункта меню
                    },
                    {
                        text: "Введите кол-во комнат",
                        values: [""],
                        type: "editable" // возможность редактирования значения пункта меню
                    },
                    {
                        text: "Введите коэффициент аренды",
                        values: [""],
                        type: "editable" // возможность редактирования значения пункта меню
                    },
                    {
                        text: "Поставить спавн в интерьере",
                        values: ['No'],
                        i: 0,
                    },
                    {
                        text: "Поставить выход из интерьера",
                        values: ['No'],
                        i: 0,
                    },
                    {
                        text: "Создать",
                    },
                    {
                        text: "Закрыть",
                    }
                ],
                i: 0,
                j: 0,
                handler(eventName) {
                    var item = this.items[this.i];
                    var e = {
                        menuName: this.name,
                        itemName: item.text,
                        itemIndex: this.i,
                        itemValue: (item.i != null && item.values) ? item.values[item.i] : null,
                        valueIndex: item.i,
                    };
                    if (eventName == 'onItemSelected') {
                        switch (e.itemName) {
                            case "Поставить спавн в интерьере":
                                mp.trigger("house.add.interior.enter");
                                break;
                            case "Поставить выход из интерьера":
                                mp.trigger("house.add.interior.exit");
                                break;
                            case "Создать":
                                mp.trigger("house.add.interior.create", this.items[0].i, this.items[1].values[0], this.items[2].values[0], this.items[3].values[0]);
                                break;
                            case "Закрыть":
                                mp.trigger("house.add.interior.close");
                                break;
                        }
                    }
                }
            },
            "houseAddGarageMenu": {
                name: "houseaddgarage",
                header: "Добавление гаража",
                items: [{
                        text: "Создать авто",
                    },
                    {
                        text: "Добавить парковочное место",
                    },
                    {
                        text: "Удалить парковочное место",
                    },
                    {
                        text: "Поставить спавн в гараже",
                        values: ['No'],
                        i: 0,
                    },
                    {
                        text: "Поставить выход из гаража",
                        values: ['No'],
                        i: 0,
                    },
                    {
                        text: "Создать",
                    },
                    {
                        text: "Закрыть",
                    }
                ],
                i: 0,
                j: 0,
                handler(eventName) {
                    var item = this.items[this.i];
                    var e = {
                        menuName: this.name,
                        itemName: item.text,
                        itemIndex: this.i,
                        itemValue: (item.i != null && item.values) ? item.values[item.i] : null,
                        valueIndex: item.i,
                    };
                    if (eventName == 'onItemSelected') {
                        switch (e.itemName) {
                            case "Создать авто":
                                mp.trigger("house.add.garage.carSpawn");
                                break;
                            case "Добавить парковочное место":
                                mp.trigger("house.add.garage.addPlace");
                                break;
                            case "Удалить парковочное место":
                                mp.trigger("house.add.garage.removePlace");
                                break;
                            case "Поставить спавн в гараже":
                                mp.trigger("house.add.garage.enter");
                                break;
                            case "Поставить выход из гаража":
                                mp.trigger("house.add.garage.exit");
                                break;
                            case "Создать":
                                mp.trigger("house.add.garage.create");
                                break;
                            case "Закрыть":
                                mp.trigger("house.add.garage.close");
                                break;
                        }
                    }
                }
            },
            "fuelStationMenu": {
                name: "fuelstation",
                header: "АЗС",
                items: [{
                        text: "Выбрать количество литров",
                        i: 0,
                    },
                    {
                        text: "Заправить полный бак",
                        i: 0,
                    },
                    {
                        text: "Отмена",
                        i: 0,
                    }
                ],
                i: 0,
                j: 0,
                handler(eventName) {
                    var item = this.items[this.i];
                    var e = {
                        menuName: this.name,
                        itemName: item.text,
                        itemIndex: this.i,
                        itemValue: (item.i != null && item.values) ? item.values[item.i] : null,
                        valueIndex: item.i,
                    };
                    if (eventName == 'onItemSelected') {
                        if (e.itemName == 'Выбрать количество литров') {
                            mp.trigger(`fuelstations.fill.litres.show`);
                        }
                        if (e.itemName == 'Заправить полный бак') {
                            mp.trigger(`fuelstations.fill.fulltank`);
                        }
                        if (e.itemName == 'Отмена') {
                            mp.trigger(`fuelstations.menu.close`);
                        }
                    }
                }
            },
            "taxiJobMenu": {
                name: "taxijob",
                header: "Управляющий таксопарком",
                items: [{
                        text: "Устроиться на работу",
                        i: 0,
                    },
                    // {
                    //     text: "Помощь", // TODO
                    //     i: 0,
                    // },
                    {
                        text: "Закрыть",
                        i: 0,
                    }
                ],
                i: 0,
                j: 0,
                handler(eventName) {
                    var item = this.items[this.i];
                    var e = {
                        menuName: this.name,
                        itemName: item.text,
                        itemIndex: this.i,
                        itemValue: (item.i != null && item.values) ? item.values[item.i] : null,
                        valueIndex: item.i,
                    };
                    if (eventName == 'onItemSelected') {
                        if (e.itemName == 'Устроиться на работу') {
                            mp.trigger(`taxi.jobmenu.employment`);
                        }
                        if (e.itemName == 'Уволиться с работы') {
                            mp.trigger(`taxi.jobmenu.employment`);
                        }
                        if (e.itemName == 'Закрыть') {
                            mp.trigger(`taxi.jobmenu.close`);
                        }
                    }
                }
            },
            "fishingMenu": {
                name: "fishing",
                header: "Рыбалка",
                items: [{
                        text: 'Купить удочку',
                        i: 0,
                        values: ["$100"]
                    },
                    {
                        text: 'Продать рыбу',
                        i: 0
                    },
                    {
                        text: "Помощь",
                        i: 0,
                    },
                    {
                        text: "Закрыть",
                        i: 0,
                    }
                ],
                i: 0,
                j: 0,
                handler(eventName) {
                    var item = this.items[this.i];
                    var e = {
                        menuName: this.name,
                        itemName: item.text,
                        itemIndex: this.i,
                        itemValue: (item.i != null && item.values) ? item.values[item.i] : null,
                        valueIndex: item.i,
                    };
                    if (eventName == 'onItemSelected') {
                        if (e.itemName == 'Купить удочку') {
                            mp.trigger(`fishing.rod.buy`);
                        }
                        if (e.itemName == 'Закрыть') {
                            mp.trigger(`fishing.menu.close`);
                        }
                        if (e.itemName == 'Продать рыбу') {
                            mp.trigger(`fishing.fish.sell`);
                        }
                    }
                }
            },
            "factionGiveRank": {
                name: "factionGiveRank",
                header: "Название организации",
                items: [{
                        text: "Ранг",
                        values: ['Ранг 1', 'Ранг 2', 'Ранг 3', 'Ранг 4', 'Ранг 5', 'Ранг 6'],
                        i: 0,
                    },
                    {
                        text: "Установить",
                        location: "center",
                        i: 0,
                    },
                    {
                        text: "Закрыть",
                        location: "center",
                        i: 0,
                    }
                ],
                i: 0,
                j: 0,
                playerId: null,
                handler(eventName) {
                    var item = this.items[this.i];
                    var e = {
                        menuName: this.name,
                        itemName: item.text,
                        itemIndex: this.i,
                        itemValue: (item.i != null && item.values) ? item.values[item.i] : null,
                        valueIndex: item.i,
                    };
                    if (eventName == 'onItemSelected') {
                        if (e.itemName == 'Установить') {
                            var rank = this.items[0].i + 1;
                            mp.trigger("callRemote", "factions.giverank.set", JSON.stringify([this.playerId, rank]));
                            selectMenu.show = false;
                        } else if (e.itemName == 'Закрыть') {
                            selectMenu.show = false;
                        }
                    }
                }
            },
            "governmentStorage": {
                name: "governmentStorage",
                header: "Склад Government",
                items: [{
                        text: "Раздевалка",
                    },
                    // {
                    //     text: "Снаряжение"
                    // },
                    // {
                    //     text: "Вооружение"
                    // },
                    // {
                    //     text: "Патроны"
                    // },
                    {
                        text: "Закрыть"
                    },
                ],
                i: 0,
                j: 0,
                handler(eventName) {
                    var item = this.items[this.i];
                    var e = {
                        menuName: this.name,
                        itemName: item.text,
                        itemIndex: this.i,
                        itemValue: (item.i != null && item.values) ? item.values[item.i] : null,
                        valueIndex: item.i,
                    };
                    if (eventName == 'onItemSelected') {
                        if (e.itemName == 'Раздевалка') {
                            selectMenu.showByName("governmentClothes");
                            // } else if (e.itemName == 'Снаряжение') {
                            // selectMenu.showByName("lspdItems");
                            // } else if (e.itemName == 'Вооружение') {
                            // selectMenu.showByName("lspdGuns");
                            // } else if (e.itemName == 'Патроны') {
                            // selectMenu.showByName("lspdAmmo");
                        } else if (e.itemName == 'Закрыть') {
                            selectMenu.show = false;
                        }
                    }
                }
            },
            "governmentClothes": {
                name: "governmentClothes",
                header: "Раздевалка Government",
                items: [{
                        text: "Охрана"
                    },
                    {
                        text: "Секретарь"
                    },
                    {
                        text: "Судья"
                    },
                    {
                        text: "Адвокат"
                    },
                    {
                        text: "Губернатор"
                    },
                    // {
                    //     text: "Бронежилет"
                    // },
                    {
                        text: "Вернуться"
                    },
                ],
                i: 0,
                j: 0,
                handler(eventName) {
                    var item = this.items[this.i];
                    var e = {
                        menuName: this.name,
                        itemName: item.text,
                        itemIndex: this.i,
                        itemValue: (item.i != null && item.values) ? item.values[item.i] : null,
                        valueIndex: item.i,
                    };
                    if (eventName == 'onItemSelected') {
                        if (e.itemName == 'Вернуться') selectMenu.showByName("governmentStorage");
                        // else if (e.itemName == 'Бронежилет') mp.trigger(`callRemote`, `police.storage.armour.take`);
                        else {
                            selectMenu.show = false;
                            mp.trigger(`callRemote`, `government.storage.clothes.take`, e.itemIndex);
                        }
                    } else if (eventName == 'onBackspacePressed') selectMenu.showByName("governmentStorage");
                }
            },
            "lspdStorage": {
                name: "lspdStorage",
                header: "Склад LSPD",
                items: [{
                        text: "Раздевалка",
                    },
                    {
                        text: "Снаряжение"
                    },
                    {
                        text: "Вооружение"
                    },
                    {
                        text: "Патроны"
                    },
                    {
                        text: "Закрыть"
                    },
                ],
                i: 0,
                j: 0,
                handler(eventName) {
                    var item = this.items[this.i];
                    var e = {
                        menuName: this.name,
                        itemName: item.text,
                        itemIndex: this.i,
                        itemValue: (item.i != null && item.values) ? item.values[item.i] : null,
                        valueIndex: item.i,
                    };
                    if (eventName == 'onItemSelected') {
                        if (e.itemName == 'Раздевалка') {
                            selectMenu.showByName("lspdClothes");
                        } else if (e.itemName == 'Снаряжение') {
                            selectMenu.showByName("lspdItems");
                        } else if (e.itemName == 'Вооружение') {
                            selectMenu.showByName("lspdGuns");
                        } else if (e.itemName == 'Патроны') {
                            selectMenu.showByName("lspdAmmo");
                        } else if (e.itemName == 'Закрыть') {
                            selectMenu.show = false;
                        }
                    }
                }
            },
            "lspdClothes": {
                name: "lspdClothes",
                header: "Раздевалка LSPD",
                items: [{
                        text: "Кадет"
                    },
                    {
                        text: "Офицер №1"
                    },
                    {
                        text: "Офицер №2"
                    },
                    {
                        text: "Детектив №1"
                    },
                    {
                        text: "Детектив №2"
                    },
                    {
                        text: "SWAT"
                    },
                    {
                        text: "Зам. Шефа"
                    },
                    {
                        text: "Шеф"
                    },
                    {
                        text: "Бронежилет"
                    },
                    {
                        text: "Вернуться"
                    },
                ],
                i: 0,
                j: 0,
                handler(eventName) {
                    var item = this.items[this.i];
                    var e = {
                        menuName: this.name,
                        itemName: item.text,
                        itemIndex: this.i,
                        itemValue: (item.i != null && item.values) ? item.values[item.i] : null,
                        valueIndex: item.i,
                    };
                    if (eventName == 'onItemSelected') {
                        if (e.itemName == 'Вернуться') return selectMenu.showByName("lspdStorage");
                        else if (e.itemName == 'Бронежилет') mp.trigger(`callRemote`, `police.storage.armour.take`);
                        else mp.trigger(`callRemote`, `police.storage.clothes.take`, e.itemIndex);
                        selectMenu.show = false;
                    } else if (eventName == 'onBackspacePressed') selectMenu.showByName("lspdStorage");
                }
            },
            "lspdItems": {
                name: "lspdItems",
                header: "Снаряжение LSPD",
                items: [{
                        text: "Наручники"
                    },
                    {
                        text: "Аптечка",
                    },
                    {
                        text: "Вернуться"
                    },
                ],
                i: 0,
                j: 0,
                handler(eventName) {
                    var item = this.items[this.i];
                    var e = {
                        menuName: this.name,
                        itemName: item.text,
                        itemIndex: this.i,
                        itemValue: (item.i != null && item.values) ? item.values[item.i] : null,
                        valueIndex: item.i,
                    };
                    if (eventName == 'onItemSelected') {
                        if (e.itemName == "Вернуться") selectMenu.showByName("lspdStorage");
                        else mp.trigger(`callRemote`, `police.storage.items.take`, e.itemIndex);
                    } else if (eventName == 'onBackspacePressed') selectMenu.showByName("lspdStorage");
                }
            },
            "lspdGuns": {
                name: "lspdGuns",
                header: "Вооружение LSPD",
                items: [{
                        text: "Фонарик"
                    },
                    {
                        text: "Дубинка"
                    },
                    {
                        text: "Тайзер"
                    },
                    {
                        text: "Пистолет"
                    },
                    {
                        text: "SMG"
                    },
                    {
                        text: "Дробовик"
                    },
                    {
                        text: "Карабин"
                    },
                    {
                        text: "Вернуться"
                    },
                ],
                i: 0,
                j: 0,
                handler(eventName) {
                    var item = this.items[this.i];
                    var e = {
                        menuName: this.name,
                        itemName: item.text,
                        itemIndex: this.i,
                        itemValue: (item.i != null && item.values) ? item.values[item.i] : null,
                        valueIndex: item.i,
                    };
                    if (eventName == 'onItemSelected') {
                        if (e.itemName == "Вернуться") selectMenu.showByName("lspdStorage");
                        else mp.trigger(`callRemote`, `police.storage.guns.take`, e.itemIndex);
                    } else if (eventName == 'onBackspacePressed') selectMenu.showByName("lspdStorage");
                }
            },
            "lspdAmmo": {
                name: "lspdAmmo",
                header: "Патроны LSPD",
                items: [{
                        text: "Патроны - 9mm",
                        values: ["12 ед.", "24 ед.", "32 ед."],
                    },
                    {
                        text: "Патроны - 12mm",
                        values: ["8 ед.", "16 ед.", "24 ед."],
                    },
                    {
                        text: "Патроны - 5.56mm",
                        values: ["12 ед.", "24 ед.", "32 ед."],
                    },
                    {
                        text: "Патроны - 7.62mm",
                        values: ["10 ед.", "20 ед.", "30 ед."],
                    },
                    {
                        text: "Вернуться"
                    },
                ],
                i: 0,
                j: 0,
                handler(eventName) {
                    var item = this.items[this.i];
                    var e = {
                        menuName: this.name,
                        itemName: item.text,
                        itemIndex: this.i,
                        itemValue: (item.i != null && item.values) ? item.values[item.i] : null,
                        valueIndex: item.i,
                    };
                    if (eventName == 'onItemSelected') {
                        var values = JSON.stringify([e.itemIndex, parseInt(e.itemValue)]);
                        if (e.itemName == "Вернуться") selectMenu.showByName("lspdStorage");
                        else mp.trigger(`callRemote`, `police.storage.ammo.take`, values);
                    } else if (eventName == 'onBackspacePressed') selectMenu.showByName("lspdStorage");
                }
            },
            "lssdStorage": {
                name: "lssdStorage",
                header: "Склад BCSD",
                items: [{
                        text: "Раздевалка",
                    },
                    {
                        text: "Снаряжение"
                    },
                    {
                        text: "Вооружение"
                    },
                    {
                        text: "Патроны"
                    },
                    {
                        text: "Закрыть"
                    },
                ],
                i: 0,
                j: 0,
                handler(eventName) {
                    var item = this.items[this.i];
                    var e = {
                        menuName: this.name,
                        itemName: item.text,
                        itemIndex: this.i,
                        itemValue: (item.i != null && item.values) ? item.values[item.i] : null,
                        valueIndex: item.i,
                    };
                    if (eventName == 'onItemSelected') {
                        if (e.itemName == 'Раздевалка') {
                            selectMenu.showByName("lssdClothes");
                        } else if (e.itemName == 'Снаряжение') {
                            selectMenu.showByName("lssdItems");
                        } else if (e.itemName == 'Вооружение') {
                            selectMenu.showByName("lssdGuns");
                        } else if (e.itemName == 'Патроны') {
                            selectMenu.showByName("lssdAmmo");
                        } else if (e.itemName == 'Закрыть') {
                            selectMenu.show = false;
                        }
                    }
                }
            },
            "lssdClothes": {
                name: "lssdClothes",
                header: "Раздевалка BCSD",
                items: [{
                        text: "Кадет"
                    },
                    {
                        text: "Deputy Sheriff №1"
                    },
                    {
                        text: "Deputy Sheriff №2"
                    },
                    {
                        text: "Спец. Отдел"
                    },
                    {
                        text: "Мотопатруль"
                    },
                    {
                        text: "Зам. Шефа"
                    },
                    {
                        text: "Шеф"
                    },
                    {
                        text: "Бронежилет"
                    },
                    {
                        text: "Вернуться"
                    },
                ],
                i: 0,
                j: 0,
                handler(eventName) {
                    var item = this.items[this.i];
                    var e = {
                        menuName: this.name,
                        itemName: item.text,
                        itemIndex: this.i,
                        itemValue: (item.i != null && item.values) ? item.values[item.i] : null,
                        valueIndex: item.i,
                    };
                    if (eventName == 'onItemSelected') {
                        if (e.itemName == 'Вернуться') return selectMenu.showByName("lssdStorage");
                        else if (e.itemName == 'Бронежилет') mp.trigger(`callRemote`, `police.storage.armour.take`);
                        else mp.trigger(`callRemote`, `police.storage.clothes.take`, e.itemIndex);
                        selectMenu.show = false;
                    } else if (eventName == 'onBackspacePressed') selectMenu.showByName("lssdStorage");
                }
            },
            "lssdItems": {
                name: "lssdItems",
                header: "Снаряжение BCSD",
                items: [{
                        text: "Наручники"
                    },
                    {
                        text: "Аптечка"
                    },
                    {
                        text: "Вернуться"
                    },
                ],
                i: 0,
                j: 0,
                handler(eventName) {
                    var item = this.items[this.i];
                    var e = {
                        menuName: this.name,
                        itemName: item.text,
                        itemIndex: this.i,
                        itemValue: (item.i != null && item.values) ? item.values[item.i] : null,
                        valueIndex: item.i,
                    };
                    if (eventName == 'onItemSelected') {
                        if (e.itemName == "Вернуться") selectMenu.showByName("lssdStorage");
                        else mp.trigger(`callRemote`, `police.storage.items.take`, e.itemIndex);
                    } else if (eventName == 'onBackspacePressed') selectMenu.showByName("lssdStorage");
                }
            },
            "lssdGuns": {
                name: "lssdGuns",
                header: "Вооружение BCSD",
                items: [{
                        text: "Фонарик"
                    },
                    {
                        text: "Дубинка"
                    },
                    {
                        text: "Тайзер"
                    },
                    {
                        text: "Пистолет"
                    },
                    {
                        text: "SMG"
                    },
                    {
                        text: "Дробовик"
                    },
                    {
                        text: "Карабин"
                    },
                    {
                        text: "Вернуться"
                    },
                ],
                i: 0,
                j: 0,
                handler(eventName) {
                    var item = this.items[this.i];
                    var e = {
                        menuName: this.name,
                        itemName: item.text,
                        itemIndex: this.i,
                        itemValue: (item.i != null && item.values) ? item.values[item.i] : null,
                        valueIndex: item.i,
                    };
                    if (eventName == 'onItemSelected') {
                        if (e.itemName == "Вернуться") selectMenu.showByName("lssdStorage");
                        else mp.trigger(`callRemote`, `police.storage.guns.take`, e.itemIndex);
                    } else if (eventName == 'onBackspacePressed') selectMenu.showByName("lssdStorage");
                }
            },
            "lssdAmmo": {
                name: "lssdAmmo",
                header: "Патроны BCSD",
                items: [{
                        text: "Патроны - 9mm",
                        values: ["12 ед.", "24 ед.", "32 ед."],
                    },
                    {
                        text: "Патроны - 12mm",
                        values: ["8 ед.", "16 ед.", "24 ед."],
                    },
                    {
                        text: "Патроны - 5.56mm",
                        values: ["12 ед.", "24 ед.", "32 ед."],
                    },
                    {
                        text: "Патроны - 7.62mm",
                        values: ["10 ед.", "20 ед.", "30 ед."],
                    },
                    {
                        text: "Вернуться"
                    },
                ],
                i: 0,
                j: 0,
                handler(eventName) {
                    var item = this.items[this.i];
                    var e = {
                        menuName: this.name,
                        itemName: item.text,
                        itemIndex: this.i,
                        itemValue: (item.i != null && item.values) ? item.values[item.i] : null,
                        valueIndex: item.i,
                    };
                    if (eventName == 'onItemSelected') {
                        var values = JSON.stringify([e.itemIndex, parseInt(e.itemValue)]);
                        if (e.itemName == "Вернуться") selectMenu.showByName("lssdStorage");
                        else mp.trigger(`callRemote`, `police.storage.ammo.take`, values);
                    } else if (eventName == 'onBackspacePressed') selectMenu.showByName("lssdStorage");
                }
            },
            "fibStorage": {
                name: "fibStorage",
                header: "Склад FIB",
                items: [{
                        text: "Раздевалка",
                    },
                    {
                        text: "Снаряжение"
                    },
                    {
                        text: "Вооружение"
                    },
                    {
                        text: "Патроны"
                    },
                    {
                        text: "Закрыть"
                    },
                ],
                i: 0,
                j: 0,
                handler(eventName) {
                    var item = this.items[this.i];
                    var e = {
                        menuName: this.name,
                        itemName: item.text,
                        itemIndex: this.i,
                        itemValue: (item.i != null && item.values) ? item.values[item.i] : null,
                        valueIndex: item.i,
                    };
                    if (eventName == 'onItemSelected') {
                        if (e.itemName == 'Раздевалка') {
                            selectMenu.showByName("fibClothes");
                        } else if (e.itemName == 'Снаряжение') {
                            selectMenu.showByName("fibItems");
                        } else if (e.itemName == 'Вооружение') {
                            selectMenu.showByName("fibGuns");
                        } else if (e.itemName == 'Патроны') {
                            selectMenu.showByName("fibAmmo");
                        } else if (e.itemName == 'Закрыть') {
                            selectMenu.show = false;
                        }
                    }
                }
            },
            "fibClothes": {
                name: "fibClothes",
                header: "Раздевалка FIB",
                items: [{
                        text: "Стажер"
                    },
                    {
                        text: "Агент (деловая)"
                    },
                    {
                        text: "Агент (рабочая)"
                    },
                    {
                        text: "ATF/HRT"
                    },
                    {
                        text: "Агент №2"
                    },
                    {
                        text: "Агент №3"
                    },
                    {
                        text: "Бронежилет"
                    },
                    {
                        text: "Вернуться"
                    },
                ],
                i: 0,
                j: 0,
                handler(eventName) {
                    var item = this.items[this.i];
                    var e = {
                        menuName: this.name,
                        itemName: item.text,
                        itemIndex: this.i,
                        itemValue: (item.i != null && item.values) ? item.values[item.i] : null,
                        valueIndex: item.i,
                    };
                    if (eventName == 'onItemSelected') {
                        if (e.itemName == 'Вернуться') return selectMenu.showByName("fibStorage");
                        else if (e.itemName == 'Бронежилет') mp.trigger(`callRemote`, `fib.storage.armour.take`);
                        else mp.trigger(`callRemote`, `fib.storage.clothes.take`, e.itemIndex);
                        selectMenu.show = false;
                    } else if (eventName == 'onBackspacePressed') selectMenu.showByName("fibStorage");
                }
            },
            "fibItems": {
                name: "fibItems",
                header: "Снаряжение FIB",
                items: [{
                        text: "Наручники"
                    },
                    {
                        text: "Аптечка"
                    },
                    {
                        text: "Прослушка"
                    },
                    {
                        text: "Вернуться"
                    },
                ],
                i: 0,
                j: 0,
                handler(eventName) {
                    var item = this.items[this.i];
                    var e = {
                        menuName: this.name,
                        itemName: item.text,
                        itemIndex: this.i,
                        itemValue: (item.i != null && item.values) ? item.values[item.i] : null,
                        valueIndex: item.i,
                    };
                    if (eventName == 'onItemSelected') {
                        if (e.itemName == "Вернуться") selectMenu.showByName("fibStorage");
                        else mp.trigger(`callRemote`, `fib.storage.items.take`, e.itemIndex);
                    } else if (eventName == 'onBackspacePressed') selectMenu.showByName("fibStorage");
                }
            },
            "fibGuns": {
                name: "fibGuns",
                header: "Вооружение FIB",
                items: [{
                        text: "Снайпа"
                    },
                    {
                        text: "Карабин обновленный"
                    },
                    {
                        text: "Вернуться"
                    },
                ],
                i: 0,
                j: 0,
                handler(eventName) {
                    var item = this.items[this.i];
                    var e = {
                        menuName: this.name,
                        itemName: item.text,
                        itemIndex: this.i,
                        itemValue: (item.i != null && item.values) ? item.values[item.i] : null,
                        valueIndex: item.i,
                    };
                    if (eventName == 'onItemSelected') {
                        if (e.itemName == "Вернуться") selectMenu.showByName("fibStorage");
                        else mp.trigger(`callRemote`, `fib.storage.guns.take`, e.itemIndex);
                    } else if (eventName == 'onBackspacePressed') selectMenu.showByName("fibStorage");
                }
            },
            "fibAmmo": {
                name: "fibAmmo",
                header: "Патроны FIB",
                items: [{
                        text: "Патроны - 9mm",
                        values: ["12 ед.", "24 ед.", "32 ед."],
                    },
                    {
                        text: "Патроны - 12mm",
                        values: ["8 ед.", "16 ед.", "24 ед."],
                    },
                    {
                        text: "Патроны - 5.56mm",
                        values: ["12 ед.", "24 ед.", "32 ед."],
                    },
                    {
                        text: "Патроны - 7.62mm",
                        values: ["10 ед.", "20 ед.", "30 ед."],
                    },
                    {
                        text: "Вернуться"
                    },
                ],
                i: 0,
                j: 0,
                handler(eventName) {
                    var item = this.items[this.i];
                    var e = {
                        menuName: this.name,
                        itemName: item.text,
                        itemIndex: this.i,
                        itemValue: (item.i != null && item.values) ? item.values[item.i] : null,
                        valueIndex: item.i,
                    };
                    if (eventName == 'onItemSelected') {
                        var values = JSON.stringify([e.itemIndex, parseInt(e.itemValue)]);
                        if (e.itemName == "Вернуться") selectMenu.showByName("fibStorage");
                        else mp.trigger(`callRemote`, `fib.storage.ammo.take`, values);
                    } else if (eventName == 'onBackspacePressed') selectMenu.showByName("fibStorage");
                }
            },
            "armyStorage": {
                name: "armyStorage",
                header: "Склад ARMY",
                items: [{
                        text: "Раздевалка",
                    },
                    {
                        text: "Снаряжение"
                    },
                    {
                        text: "Вооружение"
                    },
                    {
                        text: "Патроны"
                    },
                    {
                        text: "Закрыть"
                    },
                ],
                i: 0,
                j: 0,
                handler(eventName) {
                    var item = this.items[this.i];
                    var e = {
                        menuName: this.name,
                        itemName: item.text,
                        itemIndex: this.i,
                        itemValue: (item.i != null && item.values) ? item.values[item.i] : null,
                        valueIndex: item.i,
                    };
                    if (eventName == 'onItemSelected') {
                        if (e.itemName == 'Раздевалка') {
                            selectMenu.showByName("armyClothes");
                        } else if (e.itemName == 'Снаряжение') {
                            selectMenu.showByName("armyItems");
                        } else if (e.itemName == 'Вооружение') {
                            selectMenu.showByName("armyGuns");
                        } else if (e.itemName == 'Патроны') {
                            selectMenu.showByName("armyAmmo");
                        } else if (e.itemName == 'Закрыть') {
                            selectMenu.show = false;
                        }
                    }
                }
            },
            "armyClothes": {
                name: "armyClothes",
                header: "Раздевалка ARMY",
                items: [{
                        text: "Новобранец"
                    },
                    {
                        text: "Сержант"
                    },
                    {
                        text: "Штаб-Сержант"
                    },
                    {
                        text: "Уоррент-Сержант"
                    },
                    {
                        text: "Мл. офицер"
                    },
                    {
                        text: "Ст. офицер"
                    },
                    {
                        text: "Парад. Офицер"
                    },
                    {
                        text: "Ген. Штаб"
                    },
                    {
                        text: "Парад. Ген. Штаб"
                    },
                    {
                        text: "Пилот"
                    },
                    {
                        text: "Спецназ"
                    },
                    {
                        text: "Бронежилет"
                    },
                    {
                        text: "Вернуться"
                    },
                ],
                i: 0,
                j: 0,
                handler(eventName) {
                    var item = this.items[this.i];
                    var e = {
                        menuName: this.name,
                        itemName: item.text,
                        itemIndex: this.i,
                        itemValue: (item.i != null && item.values) ? item.values[item.i] : null,
                        valueIndex: item.i,
                    };
                    if (eventName == 'onItemSelected') {
                        if (e.itemName == 'Вернуться') return selectMenu.showByName("armyStorage");
                        else if (e.itemName == 'Бронежилет') mp.trigger(`callRemote`, `army.storage.armour.take`);
                        else mp.trigger(`callRemote`, `army.storage.clothes.take`, e.itemIndex);
                        selectMenu.show = false;
                    } else if (eventName == 'onBackspacePressed') selectMenu.showByName("armyStorage");
                }
            },
            "armyItems": {
                name: "armyItems",
                header: "Снаряжение ARMY",
                items: [{
                        text: "Аптечка"
                    },
                    {
                        text: "Вернуться"
                    },
                ],
                i: 0,
                j: 0,
                handler(eventName) {
                    var item = this.items[this.i];
                    var e = {
                        menuName: this.name,
                        itemName: item.text,
                        itemIndex: this.i,
                        itemValue: (item.i != null && item.values) ? item.values[item.i] : null,
                        valueIndex: item.i,
                    };
                    if (eventName == 'onItemSelected') {
                        if (e.itemName == "Вернуться") selectMenu.showByName("armyStorage");
                        else mp.trigger(`callRemote`, `army.storage.items.take`, e.itemIndex);
                    } else if (eventName == 'onBackspacePressed') selectMenu.showByName("armyStorage");
                }
            },
            "armyGuns": {
                name: "armyGuns",
                header: "Вооружение ARMY",
                items: [{
                        text: "Дубинка"
                    },
                    {
                        text: "Пистолет"
                    },
                    {
                        text: "SMG"
                    },
                    {
                        text: "Дробовик"
                    },
                    {
                        text: "Карабин"
                    },
                    {
                        text: "Вернуться"
                    },
                ],
                i: 0,
                j: 0,
                handler(eventName) {
                    var item = this.items[this.i];
                    var e = {
                        menuName: this.name,
                        itemName: item.text,
                        itemIndex: this.i,
                        itemValue: (item.i != null && item.values) ? item.values[item.i] : null,
                        valueIndex: item.i,
                    };
                    if (eventName == 'onItemSelected') {
                        if (e.itemName == "Вернуться") selectMenu.showByName("armyStorage");
                        else mp.trigger(`callRemote`, `army.storage.guns.take`, e.itemIndex);
                    } else if (eventName == 'onBackspacePressed') selectMenu.showByName("armyStorage");
                }
            },
            "armyAmmo": {
                name: "armyAmmo",
                header: "Патроны ARMY",
                items: [{
                        text: "Патроны - 9mm",
                        values: ["12 ед.", "24 ед.", "32 ед."],
                    },
                    {
                        text: "Патроны - 12mm",
                        values: ["8 ед.", "16 ед.", "24 ед."],
                    },
                    {
                        text: "Патроны - 5.56mm",
                        values: ["12 ед.", "24 ед.", "32 ед."],
                    },
                    {
                        text: "Патроны - 7.62mm",
                        values: ["10 ед.", "20 ед.", "30 ед."],
                    },
                    {
                        text: "Вернуться"
                    },
                ],
                i: 0,
                j: 0,
                handler(eventName) {
                    var item = this.items[this.i];
                    var e = {
                        menuName: this.name,
                        itemName: item.text,
                        itemIndex: this.i,
                        itemValue: (item.i != null && item.values) ? item.values[item.i] : null,
                        valueIndex: item.i,
                    };
                    if (eventName == 'onItemSelected') {
                        var values = JSON.stringify([e.itemIndex, parseInt(e.itemValue)]);
                        if (e.itemName == "Вернуться") selectMenu.showByName("armyStorage");
                        else mp.trigger(`callRemote`, `army.storage.ammo.take`, values);
                    } else if (eventName == 'onBackspacePressed') selectMenu.showByName("armyStorage");
                }
            },
            "hospitalStorage": {
                name: "hospitalStorage",
                header: "Склад Hospital",
                items: [{
                        text: "Раздевалка",
                    },
                    {
                        text: "Снаряжение"
                    },
                    {
                        text: "Закрыть"
                    },
                ],
                i: 0,
                j: 0,
                handler(eventName) {
                    var item = this.items[this.i];
                    var e = {
                        menuName: this.name,
                        itemName: item.text,
                        itemIndex: this.i,
                        itemValue: (item.i != null && item.values) ? item.values[item.i] : null,
                        valueIndex: item.i,
                    };
                    if (eventName == 'onItemSelected') {
                        if (e.itemName == 'Раздевалка') {
                            selectMenu.showByName("hospitalClothes");
                        } else if (e.itemName == 'Снаряжение') {
                            selectMenu.showByName("hospitalItems");
                        } else if (e.itemName == 'Закрыть') {
                            selectMenu.show = false;
                        }
                    }
                }
            },
            "hospitalClothes": {
                name: "hospitalClothes",
                header: "Раздевалка Hospital",
                items: [{
                        text: "Форма №1"
                    },
                    {
                        text: "Форма №2"
                    },
                    {
                        text: "Форма №3"
                    },
                    {
                        text: "Форма №4"
                    },
                    {
                        text: "Форма №5"
                    },
                    {
                        text: "Форма №6"
                    },
                    {
                        text: "Вернуться"
                    },
                ],
                i: 0,
                j: 0,
                handler(eventName) {
                    var item = this.items[this.i];
                    var e = {
                        menuName: this.name,
                        itemName: item.text,
                        itemIndex: this.i,
                        itemValue: (item.i != null && item.values) ? item.values[item.i] : null,
                        valueIndex: item.i,
                    };
                    if (eventName == 'onItemSelected') {
                        if (e.itemName == 'Вернуться') selectMenu.showByName("hospitalStorage");
                        else {
                            selectMenu.show = false;
                            mp.trigger(`callRemote`, `hospital.storage.clothes.take`, e.itemIndex);
                        }
                    } else if (eventName == 'onBackspacePressed') selectMenu.showByName("hospitalStorage");
                }
            },
            "hospitalItems": {
                name: "hospitalItems",
                header: "Снаряжение Hospital",
                items: [{
                        text: "Малая аптечка"
                    },
                    {
                        text: "Большая аптечка"
                    },
                    {
                        text: "Пластырь"
                    },
                    {
                        text: "Адреналин"
                    },
                    {
                        text: "Вернуться"
                    },
                ],
                i: 0,
                j: 0,
                handler(eventName) {
                    var item = this.items[this.i];
                    var e = {
                        menuName: this.name,
                        itemName: item.text,
                        itemIndex: this.i,
                        itemValue: (item.i != null && item.values) ? item.values[item.i] : null,
                        valueIndex: item.i,
                    };
                    if (eventName == 'onItemSelected') {
                        if (e.itemName == "Вернуться") selectMenu.showByName("hospitalStorage");
                        else mp.trigger(`callRemote`, `hospital.storage.items.take`, e.itemIndex);
                    } else if (eventName == 'onBackspacePressed') selectMenu.showByName("hospitalStorage");
                }
            },
            "newsStorage": {
                name: "newsStorage",
                header: "Склад Weazel News",
                items: [{
                        text: "Раздевалка",
                    },
                    // {
                    //     text: "Снаряжение"
                    // },
                    {
                        text: "Закрыть"
                    },
                ],
                i: 0,
                j: 0,
                handler(eventName) {
                    var item = this.items[this.i];
                    var e = {
                        menuName: this.name,
                        itemName: item.text,
                        itemIndex: this.i,
                        itemValue: (item.i != null && item.values) ? item.values[item.i] : null,
                        valueIndex: item.i,
                    };
                    if (eventName == 'onItemSelected') {
                        if (e.itemName == 'Раздевалка') {
                            selectMenu.showByName("newsClothes");
                            // } else if (e.itemName == 'Снаряжение') {
                            // selectMenu.showByName("hospitalItems");
                        } else if (e.itemName == 'Закрыть') {
                            selectMenu.show = false;
                        }
                    }
                }
            },
            "newsClothes": {
                name: "newsClothes",
                header: "Раздевалка Weazel News",
                items: [{
                        text: "Стажер"
                    },
                    {
                        text: "Мл. Состав"
                    },
                    {
                        text: "Ст. Состав"
                    },
                    {
                        text: "Директор"
                    },
                    {
                        text: "Вернуться"
                    },
                ],
                i: 0,
                j: 0,
                handler(eventName) {
                    var item = this.items[this.i];
                    var e = {
                        menuName: this.name,
                        itemName: item.text,
                        itemIndex: this.i,
                        itemValue: (item.i != null && item.values) ? item.values[item.i] : null,
                        valueIndex: item.i,
                    };
                    if (eventName == 'onItemSelected') {
                        if (e.itemName == 'Вернуться') selectMenu.showByName("newsStorage");
                        else {
                            selectMenu.show = false;
                            mp.trigger(`callRemote`, `news.storage.clothes.take`, e.itemIndex);
                        }
                    } else if (eventName == 'onBackspacePressed') selectMenu.showByName("newsStorage");
                }
            },
            "bandStorage": {
                name: "bandStorage",
                header: "Склад банды",
                items: [{
                        text: "Вооружение"
                    },
                    {
                        text: "Патроны"
                    },
                    {
                        text: "Влияние"
                    },
                    {
                        text: "Общак"
                    },
                    {
                        text: "Закрыть"
                    },
                ],
                i: 0,
                j: 0,
                handler(eventName) {
                    var item = this.items[this.i];
                    var e = {
                        menuName: this.name,
                        itemName: item.text,
                        itemIndex: this.i,
                        itemValue: (item.i != null && item.values) ? item.values[item.i] : null,
                        valueIndex: item.i,
                    };
                    if (eventName == 'onItemSelected') {
                        if (e.itemName == 'Вооружение') {
                            selectMenu.showByName("bandGuns");
                        } else if (e.itemName == 'Патроны') {
                            selectMenu.showByName("bandAmmo");
                        } else if (e.itemName == 'Влияние') {
                            selectMenu.showByName("bandPower");
                        } else if (e.itemName == 'Общак') {
                            selectMenu.showByName("bandCash");
                        } else if (e.itemName == 'Закрыть') {
                            selectMenu.show = false;
                        }
                    }
                }
            },
            "bandGuns": {
                name: "bandGuns",
                header: "Вооружение банды",
                items: [{
                        text: "Baseball Bat"
                    },
                    {
                        text: "Pump Shotgun"
                    },
                    {
                        text: "Pistol"
                    },
                    {
                        text: "Combat Pistol"
                    },
                    {
                        text: "Micro SMG"
                    },
                    {
                        text: "Machine Pistol"
                    },
                    {
                        text: "Compact Rifle"
                    },
                    {
                        text: "Вернуться"
                    },
                ],
                i: 0,
                j: 0,
                handler(eventName) {
                    var item = this.items[this.i];
                    var e = {
                        menuName: this.name,
                        itemName: item.text,
                        itemIndex: this.i,
                        itemValue: (item.i != null && item.values) ? item.values[item.i] : null,
                        valueIndex: item.i,
                    };
                    if (eventName == 'onItemSelected') {
                        if (e.itemName == "Вернуться") selectMenu.showByName("bandStorage");
                        else mp.trigger(`callRemote`, `bands.storage.guns.take`, e.itemIndex);
                    } else if (eventName == 'onBackspacePressed') selectMenu.showByName("bandStorage");
                }
            },
            "bandAmmo": {
                name: "bandAmmo",
                header: "Патроны банды",
                items: [{
                        text: "Патроны - 9mm",
                        values: ["12 ед.", "24 ед.", "32 ед."],
                    },
                    {
                        text: "Патроны - 12mm",
                        values: ["8 ед.", "16 ед.", "24 ед."],
                    },
                    {
                        text: "Патроны - 5.56mm",
                        values: ["12 ед.", "24 ед.", "32 ед."],
                    },
                    {
                        text: "Патроны - 7.62mm",
                        values: ["10 ед.", "20 ед.", "30 ед."],
                    },
                    {
                        text: "Вернуться"
                    },
                ],
                i: 0,
                j: 0,
                handler(eventName) {
                    var item = this.items[this.i];
                    var e = {
                        menuName: this.name,
                        itemName: item.text,
                        itemIndex: this.i,
                        itemValue: (item.i != null && item.values) ? item.values[item.i] : null,
                        valueIndex: item.i,
                    };
                    if (eventName == 'onItemSelected') {
                        var values = JSON.stringify([e.itemIndex, parseInt(e.itemValue)]);
                        if (e.itemName == "Вернуться") selectMenu.showByName("bandStorage");
                        else mp.trigger(`callRemote`, `bands.storage.ammo.take`, values);
                    } else if (eventName == 'onBackspacePressed') selectMenu.showByName("bandStorage");
                }
            },
            "bandPower": {
                name: "bandPower",
                header: "Влияние в гетто",
                items: [{
                        text: "Банда 1",
                        values: ["99 зон (100%)"],
                    },
                    {
                        text: "Банда 1",
                        values: ["99 зон (100%)"],
                    },
                    {
                        text: "Банда 1",
                        values: ["99 зон (100%)"],
                    },
                    {
                        text: "Банда 1",
                        values: ["99 зон (100%)"],
                    },
                    {
                        text: "Вернуться"
                    },
                ],
                i: 0,
                j: 0,
                handler(eventName) {
                    var item = this.items[this.i];
                    var e = {
                        menuName: this.name,
                        itemName: item.text,
                        itemIndex: this.i,
                        itemValue: (item.i != null && item.values) ? item.values[item.i] : null,
                        valueIndex: item.i,
                    };
                    if (eventName == 'onItemSelected') {
                        if (e.itemName == "Вернуться") selectMenu.showByName("bandStorage");
                    } else if (eventName == 'onBackspacePressed') selectMenu.showByName("bandStorage");
                }
            },
            "bandCash": {
                name: "bandCash",
                header: "Общак банды",
                items: [{
                        text: "Баланс",
                        values: ["$999999"],
                    },
                    {
                        text: "Сумма",
                        values: [""],
                        type: "editable",
                    },
                    {
                        text: "Пополнить",
                    },
                    {
                        text: "Снять",
                    },
                    {
                        text: "Выписать чек",
                    },
                    {
                        text: "Вернуться"
                    },
                ],
                i: 0,
                j: 0,
                handler(eventName) {
                    var item = this.items[this.i];
                    var e = {
                        menuName: this.name,
                        itemName: item.text,
                        itemIndex: this.i,
                        itemValue: (item.i != null && item.values) ? item.values[item.i] : null,
                        valueIndex: item.i,
                    };
                    if (eventName == 'onItemSelected') {
                        if (e.itemName == "Пополнить") {
                            var sum = this.items[1].values[0];
                            if (isNaN(sum)) return notifications.push(`error`, `Требуется число`);
                            if (sum <= 0) return notifications.push(`error`, `Требуется положительное число`);
                            selectMenu.show = false;
                            mp.trigger(`callRemote`, `bands.storage.cash.put`, sum);
                        } else if (e.itemName == "Снять") {
                            var sum = this.items[1].values[0];
                            if (isNaN(sum)) return notifications.push(`error`, `Требуется число`);
                            if (sum <= 0) return notifications.push(`error`, `Требуется положительное число`);
                            selectMenu.show = false;
                            mp.trigger(`callRemote`, `bands.storage.cash.take`, sum);
                        } else if (e.itemName == "Выписать чек") {
                            selectMenu.showByName("bandCashCheck");
                        }
                        if (e.itemName == "Вернуться") selectMenu.showByName("bandStorage");
                    } else if (eventName == 'onBackspacePressed') selectMenu.showByName("bandStorage");
                }
            },
            "bandCashCheck": {
                name: "bandCashCheck",
                header: "Чек на пополнение общака",
                items: [{
                        text: "ID игрока",
                        values: [""],
                        type: "editable",
                    },
                    {
                        text: "Сумма $",
                        values: [""],
                        type: "editable",
                    },
                    {
                        text: "Предложить"
                    },
                    {
                        text: "Вернуться"
                    },
                ],
                i: 0,
                j: 0,
                handler(eventName) {
                    var item = this.items[this.i];
                    var e = {
                        menuName: this.name,
                        itemName: item.text,
                        itemIndex: this.i,
                        itemValue: (item.i != null && item.values) ? item.values[item.i] : null,
                        valueIndex: item.i,
                    };
                    if (eventName == 'onItemSelected') {
                        if (e.itemName == 'Предложить') {
                            var playerId = this.items[0].values[0];
                            var sum = this.items[1].values[0];
                            if (isNaN(playerId) || isNaN(sum)) return notifications.push(`error`, `Требуется число`);
                            if (playerId < 0 || sum <= 0) return notifications.push(`error`, `Требуется положительное число`);
                            var data = {
                                playerId: parseInt(this.items[0].values[0]),
                                sum: parseInt(this.items[1].values[0]),
                            };
                            selectMenu.show = false;
                            mp.trigger(`callRemote`, `factions.cash.offer`, JSON.stringify(data));
                        } else if (e.itemName == 'Вернуться') {
                            selectMenu.showByName("bandCash");
                        }
                    } else if (eventName == 'onBackspacePressed' && this.i > 1)
                        selectMenu.showByName("bandCash");
                }
            },
            "mafiaStorage": {
                name: "mafiaStorage",
                header: "Склад мафии",
                items: [{
                        text: "Вооружение"
                    },
                    {
                        text: "Патроны"
                    },
                    {
                        text: "Влияние"
                    },
                    {
                        text: "Общак"
                    },
                    {
                        text: "Закрыть"
                    },
                ],
                i: 0,
                j: 0,
                handler(eventName) {
                    var item = this.items[this.i];
                    var e = {
                        menuName: this.name,
                        itemName: item.text,
                        itemIndex: this.i,
                        itemValue: (item.i != null && item.values) ? item.values[item.i] : null,
                        valueIndex: item.i,
                    };
                    if (eventName == 'onItemSelected') {
                        if (e.itemName == 'Вооружение') {
                            selectMenu.showByName("mafiaGuns");
                        } else if (e.itemName == 'Патроны') {
                            selectMenu.showByName("mafiaAmmo");
                        } else if (e.itemName == 'Влияние') {
                            selectMenu.showByName("mafiaPower");
                        } else if (e.itemName == 'Общак') {
                            selectMenu.showByName("mafiaCash");
                        } else if (e.itemName == 'Закрыть') {
                            selectMenu.show = false;
                        }
                    }
                }
            },
            "mafiaGuns": {
                name: "mafiaGuns",
                header: "Вооружение мафии",
                items: [{
                        text: "Pistol"
                    },
                    {
                        text: "Pistol .50"
                    },
                    {
                        text: "Mini SMG"
                    },
                    {
                        text: "SMG"
                    },
                    {
                        text: "Sawed-Off Shotgun"
                    },
                    {
                        text: "Double Barrel Shotgun"
                    },
                    {
                        text: "Assault Rifle"
                    },
                    {
                        text: "Carbine Rifle"
                    },
                    {
                        text: "Вернуться"
                    },
                ],
                i: 0,
                j: 0,
                handler(eventName) {
                    var item = this.items[this.i];
                    var e = {
                        menuName: this.name,
                        itemName: item.text,
                        itemIndex: this.i,
                        itemValue: (item.i != null && item.values) ? item.values[item.i] : null,
                        valueIndex: item.i,
                    };
                    if (eventName == 'onItemSelected') {
                        if (e.itemName == "Вернуться") selectMenu.showByName("mafiaStorage");
                        else mp.trigger(`callRemote`, `mafia.storage.guns.take`, e.itemIndex);
                    } else if (eventName == 'onBackspacePressed') selectMenu.showByName("mafiaStorage");
                }
            },
            "mafiaAmmo": {
                name: "mafiaAmmo",
                header: "Патроны мафии",
                items: [{
                        text: "Патроны - 9mm",
                        values: ["12 ед.", "24 ед.", "32 ед."],
                    },
                    {
                        text: "Патроны - 12mm",
                        values: ["8 ед.", "16 ед.", "24 ед."],
                    },
                    {
                        text: "Патроны - 5.56mm",
                        values: ["12 ед.", "24 ед.", "32 ед."],
                    },
                    {
                        text: "Патроны - 7.62mm",
                        values: ["10 ед.", "20 ед.", "30 ед."],
                    },
                    {
                        text: "Вернуться"
                    },
                ],
                i: 0,
                j: 0,
                handler(eventName) {
                    var item = this.items[this.i];
                    var e = {
                        menuName: this.name,
                        itemName: item.text,
                        itemIndex: this.i,
                        itemValue: (item.i != null && item.values) ? item.values[item.i] : null,
                        valueIndex: item.i,
                    };
                    if (eventName == 'onItemSelected') {
                        var values = JSON.stringify([e.itemIndex, parseInt(e.itemValue)]);
                        if (e.itemName == "Вернуться") selectMenu.showByName("mafiaStorage");
                        else mp.trigger(`callRemote`, `mafia.storage.ammo.take`, values);
                    } else if (eventName == 'onBackspacePressed') selectMenu.showByName("mafiaStorage");
                }
            },
            "mafiaPower": {
                name: "bandPower",
                header: "Влияние в бизнесах",
                items: [{
                        text: "Мафия 1",
                        values: ["99 биз. (100%)"],
                    },
                    {
                        text: "Мафия 2",
                        values: ["99 биз. (100%)"],
                    },
                    {
                        text: "Мафия 3",
                        values: ["99 биз. (100%)"],
                    },
                    {
                        text: "Вернуться"
                    },
                ],
                i: 0,
                j: 0,
                handler(eventName) {
                    var item = this.items[this.i];
                    var e = {
                        menuName: this.name,
                        itemName: item.text,
                        itemIndex: this.i,
                        itemValue: (item.i != null && item.values) ? item.values[item.i] : null,
                        valueIndex: item.i,
                    };
                    if (eventName == 'onItemSelected') {
                        if (e.itemName == "Вернуться") selectMenu.showByName("mafiaStorage");
                    } else if (eventName == 'onBackspacePressed') selectMenu.showByName("mafiaStorage");
                }
            },
            "mafiaCash": {
                name: "mafiaCash",
                header: "Общак мафии",
                items: [{
                        text: "Баланс",
                        values: ["$999999"],
                    },
                    {
                        text: "Сумма",
                        values: [""],
                        type: "editable",
                    },
                    {
                        text: "Пополнить",
                    },
                    {
                        text: "Снять",
                    },
                    {
                        text: "Выписать чек",
                    },
                    {
                        text: "Вернуться"
                    },
                ],
                i: 0,
                j: 0,
                handler(eventName) {
                    var item = this.items[this.i];
                    var e = {
                        menuName: this.name,
                        itemName: item.text,
                        itemIndex: this.i,
                        itemValue: (item.i != null && item.values) ? item.values[item.i] : null,
                        valueIndex: item.i,
                    };
                    if (eventName == 'onItemSelected') {
                        if (e.itemName == "Пополнить") {
                            var sum = this.items[1].values[0];
                            if (isNaN(sum)) return notifications.push(`error`, `Требуется число`);
                            if (sum <= 0) return notifications.push(`error`, `Требуется положительное число`);
                            selectMenu.show = false;
                            mp.trigger(`callRemote`, `mafia.storage.cash.put`, sum);
                        } else if (e.itemName == "Снять") {
                            var sum = this.items[1].values[0];
                            if (isNaN(sum)) return notifications.push(`error`, `Требуется число`);
                            if (sum <= 0) return notifications.push(`error`, `Требуется положительное число`);
                            selectMenu.show = false;
                            mp.trigger(`callRemote`, `mafia.storage.cash.take`, sum);
                        } else if (e.itemName == "Выписать чек") {
                            selectMenu.showByName("mafiaCashCheck");
                        }
                        if (e.itemName == "Вернуться") selectMenu.showByName("bandStorage");
                    } else if (eventName == 'onBackspacePressed') selectMenu.showByName("bandStorage");
                }
            },
            "mafiaCashCheck": {
                name: "mafiaCashCheck",
                header: "Чек на пополнение общака",
                items: [{
                        text: "ID игрока",
                        values: [""],
                        type: "editable",
                    },
                    {
                        text: "Сумма $",
                        values: [""],
                        type: "editable",
                    },
                    {
                        text: "Предложить"
                    },
                    {
                        text: "Вернуться"
                    },
                ],
                i: 0,
                j: 0,
                handler(eventName) {
                    var item = this.items[this.i];
                    var e = {
                        menuName: this.name,
                        itemName: item.text,
                        itemIndex: this.i,
                        itemValue: (item.i != null && item.values) ? item.values[item.i] : null,
                        valueIndex: item.i,
                    };
                    if (eventName == 'onItemSelected') {
                        if (e.itemName == 'Предложить') {
                            var playerId = this.items[0].values[0];
                            var sum = this.items[1].values[0];
                            if (isNaN(playerId) || isNaN(sum)) return notifications.push(`error`, `Требуется число`);
                            if (playerId < 0 || sum <= 0) return notifications.push(`error`, `Требуется положительное число`);
                            var data = {
                                playerId: parseInt(this.items[0].values[0]),
                                sum: parseInt(this.items[1].values[0]),
                            };
                            selectMenu.show = false;
                            mp.trigger(`callRemote`, `factions.cash.offer`, JSON.stringify(data));
                        } else if (e.itemName == 'Вернуться') {
                            selectMenu.showByName("mafiaCash");
                        }
                    } else if (eventName == 'onBackspacePressed' && this.i > 1)
                        selectMenu.showByName("mafiaCash");
                }
            },
            "mafiaBizWar": {
                name: "mafiaBizWar",
                header: "Отжатие бизнеса",
                items: [{
                        text: "Бизнес 1",
                        values: ["ID: 1"],
                    },
                    {
                        text: "Бизнес 2",
                        values: ["ID: 2"],
                    },
                    {
                        text: "Бизнес 3",
                        values: ["ID: 3"],
                    },
                    {
                        text: "Закрыть"
                    },
                ],
                i: 0,
                j: 0,
                names: ["Мафия 1", "Мафия 2", "Мафия 3"],
                counts: [111, 222, 333],
                bizCount: 1000,
                update() {
                    var item = this.items[this.i];
                    var name = this.names[item.factionId - 12];
                    var count = this.counts[item.factionId - 12];
                    var per = parseInt(count / this.bizCount * 100);

                    selectMenu.notification = `Крыша: ${name}. Влияние: ${count} биз. ( ${per}% )`;
                },
                handler(eventName) {
                    var item = this.items[this.i];
                    var e = {
                        menuName: this.name,
                        itemName: item.text,
                        itemIndex: this.i,
                        itemValue: (item.i != null && item.values) ? item.values[item.i] : null,
                        valueIndex: item.i,
                    };
                    if (eventName == 'onItemSelected') {
                        if (e.itemName != 'Закрыть') {
                            var bizId = parseInt(this.items[0].values[0].split(":")[1]);
                            mp.trigger(`callRemote`, `mafia.bizWar.start`, bizId);
                        }
                        selectMenu.show = false;
                    } else if (eventName == "onItemFocusChanged") {
                        if (e.itemName != "Закрыть") this.update();
                    } else if (eventName == 'onBackspacePressed')
                        selectMenu.show = false;
                }
            },
            "drugsStash": {
                name: "drugsStash",
                header: "Наркопритон",
                items: [{
                        text: "Наркотик 1",
                        values: ["3 г.", "7 г.", "10 г."],
                    },
                    {
                        text: "Наркотик 2",
                        values: ["3 г.", "7 г.", "10 г."],
                    },
                    {
                        text: "Наркотик 3",
                        values: ["3 г.", "7 г.", "10 г."],
                    },
                    {
                        text: "Наркотик 4",
                        values: ["3 г.", "7 г.", "10 г."],
                    },
                    {
                        text: "Закрыть"
                    },
                ],
                i: 0,
                j: 0,
                handler(eventName) {
                    var item = this.items[this.i];
                    var e = {
                        menuName: this.name,
                        itemName: item.text,
                        itemIndex: this.i,
                        itemValue: (item.i != null && item.values) ? item.values[item.i] : null,
                        valueIndex: item.i,
                    };
                    if (eventName == 'onItemSelected') {
                        var data = {
                            index: e.itemIndex,
                            count: parseInt(e.itemValue)
                        };
                        if (e.itemName != "Закрыть") mp.trigger(`callRemote`, `bands.drugsStash.drugs.buy`, JSON.stringify(data));
                        selectMenu.show = false;
                    }
                }
            },
            "dmvMenu": {
                name: "dmv",
                header: "Покупка лицензий",
                items: [{
                        text: 'Легковой транспорт',
                        values: ["$100"]
                    },
                    {
                        text: 'Пассажирский транспорт',
                        values: ["$100"]
                    },
                    {
                        text: 'Мотоциклы',
                        values: ["$100"]
                    },
                    {
                        text: 'Грузовой транспорт',
                        values: ["$100"]
                    },
                    {
                        text: 'Воздушный транспорт',
                        values: ["$100"]
                    },
                    {
                        text: 'Водный транспорт',
                        values: ["$100"]
                    },
                    {
                        text: 'Закрыть',
                    },
                ],
                i: 0,
                j: 0,
                handler(eventName) {
                    var item = this.items[this.i];
                    var e = {
                        menuName: this.name,
                        itemName: item.text,
                        itemIndex: this.i,
                        itemValue: (item.i != null && item.values) ? item.values[item.i] : null,
                        valueIndex: item.i,
                    };
                    if (eventName == 'onItemSelected') {
                        selectMenu.loader = true;
                        //mp.trigger(`dmv.menu.close`);
                        if (e.itemName == 'Легковой транспорт') {
                            mp.trigger('callRemote', 'dmv.license.buy', 0);
                        }
                        if (e.itemName == 'Пассажирский транспорт') {
                            mp.trigger('callRemote', 'dmv.license.buy', 1);
                        }
                        if (e.itemName == 'Мотоциклы') {
                            mp.trigger('callRemote', 'dmv.license.buy', 2);
                        }
                        if (e.itemName == 'Грузовой транспорт') {
                            mp.trigger('callRemote', 'dmv.license.buy', 3);
                        }
                        if (e.itemName == 'Воздушный транспорт') {
                            mp.trigger('callRemote', 'dmv.license.buy', 4);
                        }
                        if (e.itemName == 'Водный транспорт') {
                            mp.trigger('callRemote', 'dmv.license.buy', 5);
                        }
                        if (e.itemName == 'Закрыть') {
                            selectMenu.loader = false;
                            mp.trigger(`dmv.menu.close`);
                        }
                    }
                }
            },
            "busJobMenu": {
                name: "busjob",
                header: "Управляющий станцией",
                items: [{
                        text: "Устроиться на работу",
                        i: 0,
                    },
                    // {
                    //     text: "Помощь", // TODO
                    //     i: 0,
                    // },
                    {
                        text: "Закрыть",
                        i: 0,
                    }
                ],
                i: 0,
                j: 0,
                handler(eventName) {
                    var item = this.items[this.i];
                    var e = {
                        menuName: this.name,
                        itemName: item.text,
                        itemIndex: this.i,
                        itemValue: (item.i != null && item.values) ? item.values[item.i] : null,
                        valueIndex: item.i,
                    };
                    if (eventName == 'onItemSelected') {
                        if (e.itemName == 'Устроиться на работу') {
                            mp.trigger(`callRemote`, `busdriver.employment`);
                            mp.trigger(`busdriver.jobmenu.close`);
                        }
                        if (e.itemName == 'Уволиться с работы') {
                            mp.trigger(`callRemote`, `busdriver.employment`);
                            mp.trigger(`busdriver.jobmenu.close`);
                        }
                        if (e.itemName == 'Закрыть') {
                            mp.trigger(`busdriver.jobmenu.close`);
                        }
                    }
                }
            },
            "routeCreator": {
                name: "routecreator",
                header: "Route Creator",
                items: [{
                        text: "Название маршрута",
                        values: [""],
                        type: "editable"
                    },
                    {
                        text: "Цена за точку",
                        values: [""],
                        type: "editable"
                    },
                    {
                        text: "Уровень автобусника",
                        values: ['0', '1'],
                        i: 0,
                    },
                    {
                        text: "Добавить чекпоинт",
                    },
                    {
                        text: "Добавить остановку",
                    },
                    {
                        text: "Удалить последнюю точку",
                    },
                    {
                        text: "Сохранить",
                    },
                    {
                        text: "Очистить",
                    },
                    {
                        text: "Закрыть",
                    }
                ],
                i: 0,
                j: 0,
                handler(eventName) {
                    var item = this.items[this.i];
                    var e = {
                        menuName: this.name,
                        itemName: item.text,
                        itemIndex: this.i,
                        itemValue: (item.i != null && item.values) ? item.values[item.i] : null,
                        valueIndex: item.i,
                    };
                    if (eventName == 'onItemSelected') {
                        switch (e.itemName) {
                            case 'Добавить чекпоинт':
                                mp.trigger('routecreator.checkpoint.add', 0);
                                break;
                            case 'Добавить остановку':
                                mp.trigger('routecreator.checkpoint.add', 1);
                                break;
                            case 'Сохранить':
                                mp.trigger('routecreator.route.save', this.items[0].values[0], this.items[1].values[0], this.items[2].i);
                                break;
                            case 'Закрыть':
                                mp.trigger('routecreator.close');
                                break;
                            case 'Удалить последнюю точку':
                                mp.trigger('routecreator.checkpoint.delete');
                                break;
                            case 'Очистить':
                                mp.trigger('routecreator.route.clear');
                                break;
                        }
                    }
                }
            },
            "busMenu": {
                name: "busmenu",
                header: "Выбор маршрута",
                items: [{
                        text: "Маршрут",
                        values: ['1', '2'],

                    },
                    {
                        text: "Оплата за проезд",
                        values: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10],
                        min: "$0",
                        max: "$10",
                    },
                    {
                        text: "Начать работу",
                    },
                    {
                        text: "Отмена",
                    }
                ],
                i: 0,
                j: 0,
                handler(eventName) {
                    var item = this.items[this.i];
                    var e = {
                        menuName: this.name,
                        itemName: item.text,
                        itemIndex: this.i,
                        itemValue: (item.i != null && item.values) ? item.values[item.i] : null,
                        valueIndex: item.i,
                    };
                    if (eventName == 'onItemSelected') {
                        if (e.itemName == 'Начать работу') {
                            mp.trigger(`busdriver.menu.start`, this.items[0].i, this.items[1].values[this.items[1].i]);
                            mp.trigger(`busdriver.menu.close`);
                            loader.show = true;
                        }
                        if (e.itemName == 'Отмена') {
                            mp.trigger(`busdriver.menu.close`);
                            mp.trigger('callRemote', 'busdriver.menu.closed');
                        }
                    }
                }
            },
            "tuningMain": {
                name: "tuningMain",
                header: "LS Customs",
                items: [{
                        text: "Ремонт кузова",
                        values: ['$100']
                    },
                    {
                        text: "Цвета"
                    },
                    {
                        text: "Двигатель"
                    },
                    {
                        text: "Тормоза"
                    },
                    {
                        text: "Трансмиссия"
                    },
                    {
                        text: "Подвеска"
                    },
                    {
                        text: "Броня"
                    },
                    // {
                    //     text: "Турбонаддув"
                    // },
                    // {
                    //     text: "Закрыть"
                    // },
                ],
                i: 0,
                j: 0,
                handler(eventName) {
                    var item = this.items[this.i];
                    var e = {
                        menuName: this.name,
                        itemName: item.text,
                        itemIndex: this.i,
                        itemValue: (item.i != null && item.values) ? item.values[item.i] : null,
                        valueIndex: item.i,
                    };
                    if (eventName == 'onItemSelected') {
                        mp.trigger('tuning.lastIndex.set', e.itemIndex);
                        switch (e.itemName) {
                            case 'Закрыть':
                                mp.trigger('tuning.end');
                                break;
                            case 'Ремонт кузова':
                                mp.trigger('tuning.repair');
                                break;
                            case 'Цвета':
                                mp.trigger('tuning.colorMenu.show');
                                break;
                            case 'Двигатель':
                                mp.trigger('tuning.engineMenu.show');
                                break;
                            case 'Тормоза':
                                mp.trigger('tuning.breakMenu.show');
                                break;
                            case 'Трансмиссия':
                                mp.trigger('tuning.transmissionMenu.show');
                                break;
                            case 'Подвеска':
                                mp.trigger('tuning.suspensionMenu.show');
                                break;
                            case 'Броня':
                                mp.trigger('tuning.armourMenu.show');
                                break;
                            case 'Турбонаддув':
                                mp.trigger('tuning.turboMenu.show');
                                break;
                            case 'Спойлер':
                                mp.trigger('tuning.defaultMenu.show', 'spoiler');
                                break;
                            case 'Передний бампер':
                                mp.trigger('tuning.defaultMenu.show', 'frontBumper');
                                break;
                            case 'Задний бампер':
                                mp.trigger('tuning.defaultMenu.show', 'rearBumper');
                                break;
                            case 'Пороги':
                                mp.trigger('tuning.defaultMenu.show', 'sideSkirt');
                                break;
                            case 'Глушитель':
                                mp.trigger('tuning.defaultMenu.show', 'exhaust');
                                break;
                            case 'Рама':
                                mp.trigger('tuning.defaultMenu.show', 'frame');
                                break;
                            case 'Решетка радиатора':
                                mp.trigger('tuning.defaultMenu.show', 'grille');
                                break;
                            case 'Капот':
                                mp.trigger('tuning.defaultMenu.show', 'hood');
                                break;
                            case 'Крыло':
                                mp.trigger('tuning.defaultMenu.show', 'fender');
                                break;
                            case 'Правое крыло':
                                mp.trigger('tuning.defaultMenu.show', 'rightFender');
                                break;
                            case 'Крыша':
                                mp.trigger('tuning.defaultMenu.show', 'roof');
                                break;
                            case 'Покрасочные работы':
                                mp.trigger('tuning.defaultMenu.show', 'livery');
                                break;
                            case 'Колеса':
                                mp.trigger('tuning.defaultMenu.show', 'frontWheels');
                                break;

                        }
                    }
                    if (eventName == 'onEscapePressed' || eventName == 'onBackspacePressed') {
                        mp.trigger('tuning.end');
                    }
                }
            },
            "tuningColors": {
                name: "tuningColors",
                header: "Покраска",
                items: [{
                        text: "Основной цвет",
                        values: [],
                        i: 0,
                        j: 0
                    },
                    {
                        text: "Дополнительный цвет",
                        values: []
                    },
                    {
                        text: "Покрасить",
                        values: ['$100']
                    },
                    {
                        text: "Назад"
                    }
                ],
                i: 0, // индекс выбранного пункта
                j: 0, // индекс первого видимого пункта
                handler(eventName) { // обработчик взаимодействия с меню
                    var item = this.items[this.i];
                    var e = {
                        menuName: this.name, // название меню
                        itemName: item.text, // текст пункта меню
                        itemIndex: this.i, // индекс пункта меню
                        itemValue: (item.i != null && item.values) ? item.values[item.i] : null, // значение пункта меню
                        valueIndex: item.i, // индекс значения пункта меню
                    };
                    if (eventName == 'onItemValueChanged') {
                        if (e.itemName == 'Основной цвет') {
                            mp.trigger(`tuning.colors`, e.valueIndex, -1);
                        }
                        if (e.itemName == 'Дополнительный цвет') {
                            mp.trigger(`tuning.colors`, -1, e.valueIndex);
                        }
                    }
                    if (eventName == 'onItemSelected') {
                        if (e.itemName == 'Назад') {
                            selectMenu.menu = cloneObj(selectMenu.menus["tuningMain"]);
                            mp.trigger('tuning.params.set')
                        }
                        if (e.itemName == 'Покрасить') {
                            mp.trigger('tuning.colors.confirm')
                        }
                    }
                    if (eventName == 'onEscapePressed' || eventName == 'onBackspacePressed') {
                        mp.trigger('tuning.menu.show');
                        mp.trigger('tuning.params.set')
                    }
                }
            },
            "tuningEngine": {
                name: "tuningEngine",
                header: "Улучшение двигателя",
                items: [{
                        text: "Стандарт",
                        values: ['$100']
                    },
                    {
                        text: "Улучшение СУД, уровень 1",
                        values: ['$100']
                    },
                    {
                        text: "Улучшение СУД, уровень 2",
                        values: ['$100']
                    },
                    {
                        text: "Улучшение СУД, уровень 3",
                        values: ['$100']
                    },
                    {
                        text: "Улучшение СУД, уровень 4",
                        values: ['$100']
                    },
                    {
                        text: "Назад"
                    },
                ],
                i: 0,
                j: 0,
                handler(eventName) {
                    var item = this.items[this.i];
                    var e = {
                        menuName: this.name,
                        itemName: item.text,
                        itemIndex: this.i,
                        itemValue: (item.i != null && item.values) ? item.values[item.i] : null,
                        valueIndex: item.i,
                    };
                    if (eventName == 'onItemSelected') {
                        if (e.itemName == 'Назад') {
                            mp.trigger('tuning.menu.show');
                        } else {
                            let index = e.itemIndex - 1;
                            mp.trigger('tuning.buy', 11, index);
                        }
                    }
                    if (eventName == 'onEscapePressed' || eventName == 'onBackspacePressed') {
                        mp.trigger('tuning.menu.show');
                        //mp.trigger('tuning.params.set')
                    }
                }
            },
            "tuningBreak": {
                name: "tuningBreak",
                header: "Улучшение тормозов",
                items: [{
                        text: "Стандартные тормоза",
                        values: ['$100']
                    },
                    {
                        text: "Уличные тормоза",
                        values: ['$100']
                    },
                    {
                        text: "Спортивные тормоза",
                        values: ['$100']
                    },
                    {
                        text: "Гоночные тормоза",
                        values: ['$100']
                    },
                    {
                        text: "Назад"
                    },
                ],
                i: 0,
                j: 0,
                handler(eventName) {
                    var item = this.items[this.i];
                    var e = {
                        menuName: this.name,
                        itemName: item.text,
                        itemIndex: this.i,
                        itemValue: (item.i != null && item.values) ? item.values[item.i] : null,
                        valueIndex: item.i,
                    };
                    if (eventName == 'onItemSelected') {
                        if (e.itemName == 'Назад') {
                            mp.trigger('tuning.menu.show');
                        } else {
                            let index = e.itemIndex - 1;
                            mp.trigger('tuning.buy', 12, index);
                        }
                    }
                    if (eventName == 'onEscapePressed' || eventName == 'onBackspacePressed') {
                        mp.trigger('tuning.menu.show');
                        //mp.trigger('tuning.params.set')
                    }
                }
            },
            "tuningTransmission": {
                name: "tuningTransmission",
                header: "Улучшение трансмиссии",
                items: [{
                        text: "Стандартная трансмиссия",
                        values: ['$100']
                    },
                    {
                        text: "Уличная трансмиссия",
                        values: ['$100']
                    },
                    {
                        text: "Спортивная трансмиссия",
                        values: ['$100']
                    },
                    {
                        text: "Гоночная трансмиссия",
                        values: ['$100']
                    },
                    {
                        text: "Назад"
                    },
                ],
                i: 0,
                j: 0,
                handler(eventName) {
                    var item = this.items[this.i];
                    var e = {
                        menuName: this.name,
                        itemName: item.text,
                        itemIndex: this.i,
                        itemValue: (item.i != null && item.values) ? item.values[item.i] : null,
                        valueIndex: item.i,
                    };
                    if (eventName == 'onItemSelected') {
                        if (e.itemName == 'Назад') {
                            mp.trigger('tuning.menu.show');
                        } else {
                            let index = e.itemIndex - 1;
                            mp.trigger('tuning.buy', 13, index);
                        }
                    }
                    if (eventName == 'onEscapePressed' || eventName == 'onBackspacePressed') {
                        mp.trigger('tuning.menu.show');
                    }
                }
            },
            "tuningSuspension": {
                name: "tuningTransmission",
                header: "Улучшение трансмиссии",
                items: [{
                        text: "Стандартная подвеска",
                        values: ['$100']
                    },
                    {
                        text: "Заниженная подвеска",
                        values: ['$100']
                    },
                    {
                        text: "Уличная подвеска",
                        values: ['$100']
                    },
                    {
                        text: "Спортивная подвеска",
                        values: ['$100']
                    },
                    {
                        text: "Гоночная подвеска",
                        values: ['$100']
                    },
                    {
                        text: "Назад"
                    },
                ],
                i: 0,
                j: 0,
                handler(eventName) {
                    var item = this.items[this.i];
                    var e = {
                        menuName: this.name,
                        itemName: item.text,
                        itemIndex: this.i,
                        itemValue: (item.i != null && item.values) ? item.values[item.i] : null,
                        valueIndex: item.i,
                    };
                    if (eventName == 'onItemFocusChanged') {
                        if (e.itemName != 'Назад') {
                            let index = e.itemIndex - 1;
                            mp.trigger('tuning.mod.set', 15, index);
                        }
                    }
                    if (eventName == 'onItemSelected') {
                        if (e.itemName == 'Назад') {
                            mp.trigger('tuning.menu.show');
                            mp.trigger('tuning.params.set')
                        } else {
                            let index = e.itemIndex - 1;
                            mp.trigger('tuning.buy', 15, index);
                        }
                    }
                    if (eventName == 'onEscapePressed' || eventName == 'onBackspacePressed') {
                        mp.trigger('tuning.menu.show');
                        mp.trigger('tuning.params.set')
                    }
                }
            },
            "tuningArmour": {
                name: "tuningArmour",
                header: "Броня",
                items: [{
                        text: "Нет",
                        values: ['$100']
                    },
                    {
                        text: "Усиление брони 20%",
                        values: ['$100']
                    },
                    {
                        text: "Усиление брони 40%",
                        values: ['$100']
                    },
                    {
                        text: "Усиление брони 60%",
                        values: ['$100']
                    },
                    {
                        text: "Усиление брони 80%",
                        values: ['$100']
                    },
                    {
                        text: "Усиление брони 100%",
                        values: ['$100']
                    },
                    {
                        text: "Назад"
                    },
                ],
                i: 0,
                j: 0,
                handler(eventName) {
                    var item = this.items[this.i];
                    var e = {
                        menuName: this.name,
                        itemName: item.text,
                        itemIndex: this.i,
                        itemValue: (item.i != null && item.values) ? item.values[item.i] : null,
                        valueIndex: item.i,
                    };
                    if (eventName == 'onItemSelected') {
                        if (e.itemName == 'Назад') {
                            mp.trigger('tuning.menu.show');
                        } else {
                            let index = e.itemIndex - 1;
                            mp.trigger('tuning.buy', 16, index);
                        }
                    }
                    if (eventName == 'onEscapePressed' || eventName == 'onBackspacePressed') {
                        mp.trigger('tuning.menu.show');
                        //mp.trigger('tuning.params.set')
                    }
                }
            },
            "tuningTurbo": {
                name: "tuningTurbo",
                header: "Турбонаддув",
                items: [{
                        text: "Нет",
                        values: ['$100']
                    },
                    {
                        text: "Турбонаддув",
                        values: ['$100']
                    },
                    {
                        text: "Назад"
                    },
                ],
                i: 0,
                j: 0,
                handler(eventName) {
                    var item = this.items[this.i];
                    var e = {
                        menuName: this.name,
                        itemName: item.text,
                        itemIndex: this.i,
                        itemValue: (item.i != null && item.values) ? item.values[item.i] : null,
                        valueIndex: item.i,
                    };
                    if (eventName == 'onItemSelected') {
                        if (e.itemName == 'Назад') {
                            mp.trigger('tuning.menu.show');
                        } else {
                            let index = e.itemIndex - 1;
                            mp.trigger('tuning.buy', 18, index);
                        }
                    }
                    if (eventName == 'onEscapePressed' || eventName == 'onBackspacePressed') {
                        mp.trigger('tuning.menu.show');
                        //mp.trigger('tuning.params.set')
                    }
                }
            },
            "tuningDefault": {
                name: "tuningDefault",
                header: "",
                items: [],
                i: 0,
                j: 0,
                handler(eventName) {
                    var item = this.items[this.i];
                    var e = {
                        menuName: this.name,
                        itemName: item.text,
                        itemIndex: this.i,
                        itemValue: (item.i != null && item.values) ? item.values[item.i] : null,
                        valueIndex: item.i,
                    };
                    if (eventName == 'onItemFocusChanged') {
                        let index = e.itemIndex - 1;
                        mp.trigger('tuning.mod.set', -1, index);
                    }
                    if (eventName == 'onItemSelected') {
                        if (e.itemName == 'Назад') {
                            mp.trigger('tuning.menu.show');
                            mp.trigger('tuning.params.set')
                        } else {
                            let index = e.itemIndex - 1;
                            mp.trigger('tuning.buy', -1, index);
                        }
                    }
                    if (eventName == 'onEscapePressed' || eventName == 'onBackspacePressed') {
                        mp.trigger('tuning.menu.show');
                        mp.trigger('tuning.params.set')
                    }
                }
            },
            "farm": {
                name: "farm",
                header: "Ферма",
                items: [{
                        text: "Работа",
                    },
                    {
                        text: "О ферме",
                    },
                    {
                        text: "Помощь"
                    },
                    {
                        text: "Закрыть"
                    },
                ],
                i: 0,
                j: 0,
                handler(eventName) {
                    var item = this.items[this.i];
                    var e = {
                        menuName: this.name,
                        itemName: item.text,
                        itemIndex: this.i,
                        itemValue: (item.i != null && item.values) ? item.values[item.i] : null,
                        valueIndex: item.i,
                    };
                    if (eventName == 'onItemSelected') {
                        if (e.itemName == 'Работа') {
                            selectMenu.showByName("farmJob");
                        } else if (e.itemName == 'О ферме') {
                            selectMenu.showByName("farmInfo");
                        } else if (e.itemName == 'Помощь') {

                        } else if (e.itemName == 'Купить') {
                            selectMenu.loader = true;
                            mp.trigger(`callRemote`, `farms.buy`);
                        } else if (e.itemName == 'Управление') {
                            selectMenu.showByName("farmControl");
                        } else if (e.itemName == 'Закрыть') {
                            selectMenu.show = false;
                        }
                    }
                }
            },
            "farmJob": {
                name: "farmJob",
                header: "Должности",
                items: [{
                        text: "Работник",
                    },
                    {
                        text: "Фермер"
                    },
                    {
                        text: "Тракторист"
                    },
                    {
                        text: "Пилот"
                    },
                    {
                        text: "Уволиться"
                    },
                    {
                        text: "Вернуться"
                    },
                ],
                i: 0,
                j: 0,
                handler(eventName) {
                    var item = this.items[this.i];
                    var e = {
                        menuName: this.name,
                        itemName: item.text,
                        itemIndex: this.i,
                        itemValue: (item.i != null && item.values) ? item.values[item.i] : null,
                        valueIndex: item.i,
                    };
                    if (eventName == 'onItemSelected') {
                        if (e.itemName == 'Работник') {
                            mp.trigger(`callRemote`, `farms.job.start`, 0);
                        } else if (e.itemName == 'Фермер') {
                            mp.trigger(`callRemote`, `farms.job.start`, 1);
                        } else if (e.itemName == 'Тракторист') {
                            mp.trigger(`callRemote`, `farms.job.start`, 2);
                        } else if (e.itemName == 'Пилот') {
                            mp.trigger(`callRemote`, `farms.job.start`, 3);
                        } else if (e.itemName == 'Уволиться') {
                            mp.trigger(`callRemote`, `farms.job.stop`);
                        } else if (e.itemName == 'Вернуться') {
                            selectMenu.showByName("farm");
                        }
                    } else if (eventName == 'onBackspacePressed')
                        selectMenu.showByName("farm");
                }
            },
            "farmInfo": {
                name: "farmInfo",
                header: "О ферме",
                items: [{
                        text: "Ферма",
                        values: ["ID 111"],
                    },
                    {
                        text: "Хозяин",
                        values: ["Swift Slade"],
                    },
                    {
                        text: "Баланс",
                        values: ["$999"],
                    },
                    {
                        text: "Налог. баланс",
                        values: ["$999"],
                    },
                    {
                        text: "Зарплата",
                        values: ["$30"],
                    },
                    {
                        text: "Премия фермера",
                        values: ["$50"],
                    },
                    {
                        text: "Премия тракториста",
                        values: ["$70"],
                    },
                    {
                        text: "Премия пилота",
                        values: ["$80"],
                    },
                    {
                        text: "Количество полей",
                        values: ["10 ед."],
                    },
                    {
                        text: "Вернуться"
                    },
                ],
                i: 0,
                j: 0,
                handler(eventName) {
                    var item = this.items[this.i];
                    var e = {
                        menuName: this.name,
                        itemName: item.text,
                        itemIndex: this.i,
                        itemValue: (item.i != null && item.values) ? item.values[item.i] : null,
                        valueIndex: item.i,
                    };
                    if (eventName == 'onItemSelected') {
                        if (e.itemName == 'Вернуться') {
                            selectMenu.showByName("farm");
                        }
                    } else if (eventName == 'onBackspacePressed')
                        selectMenu.showByName("farm");
                }
            },
            "farmControl": {
                name: "farmControl",
                header: "Управление фермой",
                items: [{
                        text: "Зерно",
                    },
                    {
                        text: "Удобрение",
                    },
                    {
                        text: "Урожай"
                    },
                    {
                        text: "Баланс"
                    },
                    {
                        text: "Зарплаты"
                    },
                    {
                        text: "Продать"
                    },
                    {
                        text: "Вернуться"
                    },
                ],
                i: 0,
                j: 0,
                handler(eventName) {
                    var item = this.items[this.i];
                    var e = {
                        menuName: this.name,
                        itemName: item.text,
                        itemIndex: this.i,
                        itemValue: (item.i != null && item.values) ? item.values[item.i] : null,
                        valueIndex: item.i,
                    };
                    if (eventName == 'onItemSelected') {
                        if (e.itemName == 'Зерно') {
                            selectMenu.showByName("farmControlGrains");
                        } else if (e.itemName == 'Удобрение') {
                            selectMenu.showByName("farmControlSoils");
                        } else if (e.itemName == 'Урожай') {
                            selectMenu.showByName("farmControlCrops");
                        } else if (e.itemName == 'Баланс') {
                            selectMenu.showByName("farmControlBalance");
                        } else if (e.itemName == 'Зарплаты') {
                            selectMenu.showByName("farmControlPays");
                        } else if (e.itemName == 'Продать') {
                            selectMenu.showByName("farmControlSell");
                        } else if (e.itemName == 'Вернуться') {
                            selectMenu.showByName("farm");
                        }
                    } else if (eventName == 'onBackspacePressed')
                        selectMenu.showByName("farm");

                }
            },
            "farmControlGrains": {
                name: "farmControlGrains",
                header: "Зерно фермы",
                items: [{
                        text: "Цена $ за 1 ед.",
                        values: ["999"],
                        type: "editable"
                    },
                    {
                        text: "Установить"
                    },
                    {
                        text: "Вернуться"
                    },
                ],
                i: 0,
                j: 0,
                handler(eventName) {
                    var item = this.items[this.i];
                    var e = {
                        menuName: this.name,
                        itemName: item.text,
                        itemIndex: this.i,
                        itemValue: (item.i != null && item.values) ? item.values[item.i] : null,
                        valueIndex: item.i,
                    };
                    if (eventName == 'onItemSelected') {
                        if (e.itemName == 'Установить') {
                            var price = this.items[0].values[0];
                            if (isNaN(price)) return notifications.push(`error`, `Требуется число`);
                            mp.trigger(`callRemote`, `farms.grains.price.set`, parseInt(price));
                        } else if (e.itemName == 'Вернуться') {
                            selectMenu.showByName("farmControl");
                        }
                    } else if (eventName == 'onBackspacePressed' && this.i != 0)
                        selectMenu.showByName("farmControl");
                }
            },
            "farmControlSoils": {
                name: "farmControlSoils",
                header: "Удобрение фермы",
                items: [{
                        text: "Цена $ за 1 ед.",
                        values: ["999"],
                        type: "editable"
                    },
                    {
                        text: "Установить"
                    },
                    {
                        text: "Вернуться"
                    },
                ],
                i: 0,
                j: 0,
                handler(eventName) {
                    var item = this.items[this.i];
                    var e = {
                        menuName: this.name,
                        itemName: item.text,
                        itemIndex: this.i,
                        itemValue: (item.i != null && item.values) ? item.values[item.i] : null,
                        valueIndex: item.i,
                    };
                    if (eventName == 'onItemSelected') {
                        if (e.itemName == 'Установить') {
                            var price = this.items[0].values[0];
                            if (isNaN(price)) return notifications.push(`error`, `Требуется число`);
                            mp.trigger(`callRemote`, `farms.soils.price.set`, parseInt(price));
                        } else if (e.itemName == 'Вернуться') {
                            selectMenu.showByName("farmControl");
                        }
                    } else if (eventName == 'onBackspacePressed' && this.i != 0)
                        selectMenu.showByName("farmControl");
                }
            },
            "farmControlCrops": {
                name: "farmControlCrops",
                header: "Урожай фермы",
                items: [{
                        text: "Тип урожая",
                        values: ["Урожай А", "Урожай Б", "Урожай С"],
                    },
                    {
                        text: "Цена $ за 1 ед.",
                        values: ["999"],
                        type: "editable"
                    },
                    {
                        text: "Установить"
                    },
                    {
                        text: "Вернуться"
                    },
                ],
                i: 0,
                j: 0,
                handler(eventName) {
                    var item = this.items[this.i];
                    var e = {
                        menuName: this.name,
                        itemName: item.text,
                        itemIndex: this.i,
                        itemValue: (item.i != null && item.values) ? item.values[item.i] : null,
                        valueIndex: item.i,
                    };
                    if (eventName == 'onItemSelected') {
                        if (e.itemName == 'Установить') {
                            var field = this.items[0].i;
                            var price = this.items[1].values[0];
                            if (isNaN(price)) return notifications.push(`error`, `Требуется число`);
                            var data = {
                                price: parseInt(price),
                                field: field
                            };
                            mp.trigger(`callRemote`, `farms.crops.price.set`, JSON.stringify(data));
                        } else if (e.itemName == 'Вернуться') {
                            selectMenu.showByName("farmControl");
                        }
                    } else if (eventName == 'onBackspacePressed' && this.i != 1)
                        selectMenu.showByName("farmControl");
                }
            },
            "farmControlBalance": {
                name: "farmControlBalance",
                header: "Баланс фермы",
                items: [{
                        text: "Тип баланса",
                        values: ["Основной", "Налог"],
                    },
                    {
                        text: "Сумма $",
                        values: ["0"],
                        type: "editable"
                    },
                    {
                        text: "Установить"
                    },
                    {
                        text: "Вернуться"
                    },
                ],
                i: 0,
                j: 0,
                handler(eventName) {
                    var item = this.items[this.i];
                    var e = {
                        menuName: this.name,
                        itemName: item.text,
                        itemIndex: this.i,
                        itemValue: (item.i != null && item.values) ? item.values[item.i] : null,
                        valueIndex: item.i,
                    };
                    if (eventName == 'onItemSelected') {
                        if (e.itemName == 'Установить') {
                            var balance = this.items[0].i;
                            var sum = this.items[1].values[0];
                            if (isNaN(sum)) return notifications.push(`error`, `Требуется число`);
                            var data = {
                                sum: parseInt(sum),
                                balance: balance
                            };
                            selectMenu.loader = true;
                            mp.trigger(`callRemote`, `farms.balance.set`, JSON.stringify(data));
                        } else if (e.itemName == 'Вернуться') {
                            selectMenu.showByName("farmControl");
                        }
                    } else if (eventName == 'onBackspacePressed' && this.i != 1)
                        selectMenu.showByName("farmControl");
                }
            },
            "farmControlPays": {
                name: "farmControlPays",
                header: "Зарплаты фермы",
                items: [{
                        text: "Должность",
                        values: ["Работник", "Фермер", "Тракторист", "Пилот"],
                    },
                    {
                        text: "Сумма $",
                        values: ["0"],
                        type: "editable"
                    },
                    {
                        text: "Установить"
                    },
                    {
                        text: "Вернуться"
                    },
                ],
                i: 0,
                j: 0,
                handler(eventName) {
                    var item = this.items[this.i];
                    var e = {
                        menuName: this.name,
                        itemName: item.text,
                        itemIndex: this.i,
                        itemValue: (item.i != null && item.values) ? item.values[item.i] : null,
                        valueIndex: item.i,
                    };
                    if (eventName == 'onItemSelected') {
                        if (e.itemName == 'Установить') {
                            var job = this.items[0].i;
                            var sum = this.items[1].values[0];
                            if (isNaN(sum)) return notifications.push(`error`, `Требуется число`);
                            var data = {
                                sum: parseInt(sum),
                                job: job
                            };
                            mp.trigger(`callRemote`, `farms.pay.set`, JSON.stringify(data));
                        } else if (e.itemName == 'Вернуться') {
                            selectMenu.showByName("farmControl");
                        }
                    } else if (eventName == 'onBackspacePressed' && this.i != 1)
                        selectMenu.showByName("farmControl");
                }
            },
            "farmControlSell": {
                name: "farmControlSell",
                header: "Продажа фермы",
                items: [{
                        text: "В штат",
                        values: ["$999"],
                    },
                    {
                        text: "Игроку",
                    },
                    {
                        text: "Вернуться"
                    },
                ],
                i: 0,
                j: 0,
                handler(eventName) {
                    var item = this.items[this.i];
                    var e = {
                        menuName: this.name,
                        itemName: item.text,
                        itemIndex: this.i,
                        itemValue: (item.i != null && item.values) ? item.values[item.i] : null,
                        valueIndex: item.i,
                    };
                    if (eventName == 'onItemSelected') {
                        if (e.itemName == 'В штат') {
                            selectMenu.loader = true;
                            mp.trigger(`callRemote`, `farms.sell.state`);
                        } else if (e.itemName == 'Игроку') {
                            selectMenu.showByName("farmControlSellToPlayer");
                        } else if (e.itemName == 'Вернуться') {
                            selectMenu.showByName("farmControl");
                        }
                    } else if (eventName == 'onBackspacePressed')
                        selectMenu.showByName("farmControl");
                }
            },
            "farmControlSellToPlayer": {
                name: "farmControlSellToPlayer",
                header: "Продажа фермы игроку",
                items: [{
                        text: "ID игрока",
                        values: [""],
                        type: "editable",
                    },
                    {
                        text: "Сумма $",
                        values: [""],
                        type: "editable",
                    },
                    {
                        text: "Предложить"
                    },
                    {
                        text: "Вернуться"
                    },
                ],
                i: 0,
                j: 0,
                handler(eventName) {
                    var item = this.items[this.i];
                    var e = {
                        menuName: this.name,
                        itemName: item.text,
                        itemIndex: this.i,
                        itemValue: (item.i != null && item.values) ? item.values[item.i] : null,
                        valueIndex: item.i,
                    };
                    if (eventName == 'onItemSelected') {
                        if (e.itemName == 'Предложить') {
                            var playerId = this.items[0].values[0];
                            var sum = this.items[1].values[0];
                            if (isNaN(playerId) || isNaN(sum)) return notifications.push(`error`, `Требуется число`);
                            if (playerId < 0 || sum <= 0) return notifications.push(`error`, `Требуется положительное число`);
                            var data = {
                                playerId: parseInt(this.items[0].values[0]),
                                sum: parseInt(this.items[1].values[0]),
                            };
                            mp.trigger(`callRemote`, `farms.sell.player`, JSON.stringify(data))
                        } else if (e.itemName == 'Вернуться') {
                            selectMenu.showByName("farmControlSell");
                        }
                    } else if (eventName == 'onBackspacePressed' && this.i > 1)
                        selectMenu.showByName("farmControlSell");
                }
            },
            "farmWarehouse": {
                name: "farmWarehouse",
                header: "Склад фермы",
                items: [{
                        text: "Зерно",
                    },
                    {
                        text: "Урожай"
                    },
                    {
                        text: "О складе"
                    },
                    {
                        text: "Закрыть"
                    },
                ],
                i: 0,
                j: 0,
                handler(eventName) {
                    var item = this.items[this.i];
                    var e = {
                        menuName: this.name,
                        itemName: item.text,
                        itemIndex: this.i,
                        itemValue: (item.i != null && item.values) ? item.values[item.i] : null,
                        valueIndex: item.i,
                    };
                    if (eventName == 'onItemSelected') {
                        if (e.itemName == 'Зерно') {
                            selectMenu.showByName("farmGrains");
                        } else if (e.itemName == 'Урожай') {
                            selectMenu.showByName("farmProducts");
                        } else if (e.itemName == 'О складе') {
                            selectMenu.showByName("farmWarehouseInfo");
                        } else if (e.itemName == 'Закрыть') {
                            selectMenu.show = false;
                        }
                    }
                }
            },
            "farmWarehouseInfo": {
                name: "farmWarehouseInfo",
                header: "О складе",
                items: [{
                        text: "Зерно",
                        values: ["9999 из 9999 ед. ($999)"],
                    },
                    {
                        text: "Урожай А",
                        values: ["9999 из 9999 ед. ($999)"],
                    },
                    {
                        text: "Урожай Б",
                        values: ["9999 из 9999 ед. ($999)"],
                    },
                    {
                        text: "Урожай С",
                        values: ["9999 из 9999 ед. ($999)"],
                    },
                    {
                        text: "Вернуться"
                    },
                ],
                i: 0,
                j: 0,
                handler(eventName) {
                    var item = this.items[this.i];
                    var e = {
                        menuName: this.name,
                        itemName: item.text,
                        itemIndex: this.i,
                        itemValue: (item.i != null && item.values) ? item.values[item.i] : null,
                        valueIndex: item.i,
                    };
                    if (eventName == 'onItemSelected') {
                        if (e.itemName == 'Вернуться') {
                            selectMenu.showByName("farmWarehouse");
                        }
                    } else if (eventName == 'onBackspacePressed')
                        selectMenu.showByName("farmWarehouse");
                }
            },
            "farmGrains": {
                name: "farmGrains",
                header: "Зерно",
                items: [{
                        text: "Загрузка",
                    },
                    {
                        text: "Продажа"
                    },
                    {
                        text: "Вернуться"
                    },
                ],
                i: 0,
                j: 0,
                handler(eventName) {
                    var item = this.items[this.i];
                    var e = {
                        menuName: this.name,
                        itemName: item.text,
                        itemIndex: this.i,
                        itemValue: (item.i != null && item.values) ? item.values[item.i] : null,
                        valueIndex: item.i,
                    };
                    if (eventName == 'onItemSelected') {
                        if (e.itemName == 'Загрузка') {
                            selectMenu.showByName("farmGrainsTake");
                        } else if (e.itemName == 'Продажа') {
                            selectMenu.showByName("farmGrainsSell");
                        } else if (e.itemName == 'Вернуться') {
                            selectMenu.showByName("farmWarehouse");
                        }
                    } else if (eventName == 'onBackspacePressed')
                        selectMenu.showByName("farmWarehouse");
                }
            },
            "farmGrainsTake": {
                name: "farmGrainsTake",
                header: "Загрузка зерна",
                items: [{
                        text: "Участок",
                        values: ["Поле №1", "Поле №2", "Поле №3", "Поле №4"],
                    },
                    {
                        text: "Тип зерна",
                        values: ["Урожай А", "Урожай Б", "Урожай С"],
                    },
                    {
                        text: "Загрузить",
                    },
                    {
                        text: "Вернуться"
                    },
                ],
                i: 0,
                j: 0,
                handler(eventName) {
                    var item = this.items[this.i];
                    var e = {
                        menuName: this.name,
                        itemName: item.text,
                        itemIndex: this.i,
                        itemValue: (item.i != null && item.values) ? item.values[item.i] : null,
                        valueIndex: item.i,
                    };
                    if (eventName == 'onItemSelected') {
                        if (e.itemName == 'Загрузить') {
                            var data = {
                                field: this.items[0].i,
                                grain: this.items[1].i,
                            };
                            mp.trigger(`callRemote`, `farms.warehouse.grains.take`, JSON.stringify(data));
                        } else if (e.itemName == 'Вернуться') {
                            selectMenu.showByName("farmGrains");
                        }
                    } else if (eventName == 'onBackspacePressed')
                        selectMenu.showByName("farmGrains");
                }
            },
            "farmGrainsSell": {
                name: "farmGrainsSell",
                header: "Продажа зерна",
                items: [{
                        text: "Продать",
                    },
                    {
                        text: "Вернуться"
                    },
                ],
                i: 0,
                j: 0,
                handler(eventName) {
                    var item = this.items[this.i];
                    var e = {
                        menuName: this.name,
                        itemName: item.text,
                        itemIndex: this.i,
                        itemValue: (item.i != null && item.values) ? item.values[item.i] : null,
                        valueIndex: item.i,
                    };
                    if (eventName == 'onItemSelected') {
                        if (e.itemName == 'Продать') {
                            mp.trigger(`callRemote`, `farms.warehouse.grains.sell`);
                        } else if (e.itemName == 'Вернуться') {
                            selectMenu.showByName("farmGrains");
                        }
                    } else if (eventName == 'onBackspacePressed')
                        selectMenu.showByName("farmGrains");
                }
            },
            "farmProducts": {
                name: "farmProducts",
                header: "Урожай",
                items: [{
                        text: "Выгрузка",
                    },
                    {
                        text: "Покупка"
                    },
                    {
                        text: "Вернуться"
                    },
                ],
                i: 0,
                j: 0,
                handler(eventName) {
                    var item = this.items[this.i];
                    var e = {
                        menuName: this.name,
                        itemName: item.text,
                        itemIndex: this.i,
                        itemValue: (item.i != null && item.values) ? item.values[item.i] : null,
                        valueIndex: item.i,
                    };
                    if (eventName == 'onItemSelected') {
                        if (e.itemName == 'Выгрузка') {
                            selectMenu.showByName("farmProductsFill");
                        } else if (e.itemName == 'Покупка') {
                            selectMenu.showByName("farmProductsBuy");
                        } else if (e.itemName == 'Вернуться') {
                            selectMenu.showByName("farmWarehouse");
                        }
                    } else if (eventName == 'onBackspacePressed')
                        selectMenu.showByName("farmWarehouse");
                }
            },
            "farmProductsFill": {
                name: "farmProductsFill",
                header: "Выгрузка урожая",
                items: [{
                        text: "Выгрузить",
                    },
                    {
                        text: "Вернуться"
                    },
                ],
                i: 0,
                j: 0,
                handler(eventName) {
                    var item = this.items[this.i];
                    var e = {
                        menuName: this.name,
                        itemName: item.text,
                        itemIndex: this.i,
                        itemValue: (item.i != null && item.values) ? item.values[item.i] : null,
                        valueIndex: item.i,
                    };
                    if (eventName == 'onItemSelected') {
                        if (e.itemName == 'Выгрузить') {
                            mp.trigger(`callRemote`, `farms.warehouse.products.fill`);
                        } else if (e.itemName == 'Вернуться') {
                            selectMenu.showByName("farmProducts");
                        }
                    } else if (eventName == 'onBackspacePressed')
                        selectMenu.showByName("farmProducts");
                }
            },
            "farmProductsBuy": {
                name: "farmProductsBuy",
                header: "Покупка урожая",
                items: [{
                        text: "Урожай",
                        values: ["Урожай А", "Урожай Б", "Урожай С"],
                    },
                    {
                        text: "Количество",
                        values: ["100 ед.", "200 ед.", "300 ед.", "400 ед.", "500 ед.", "600 ед.", "700 ед.", "800 ед.", "900 ед.", "1000 ед.",
                            "1100 ед.", "1200 ед.", "1300 ед.", "1400 ед.", "1500 ед.", "1600 ед.", "1700 ед.", "1800 ед.", "1900 ед.", "2000 ед."
                        ],
                    },
                    {
                        text: "Купить"
                    },
                    {
                        text: "Вернуться"
                    },
                ],
                i: 0,
                j: 0,
                handler(eventName) {
                    var item = this.items[this.i];
                    var e = {
                        menuName: this.name,
                        itemName: item.text,
                        itemIndex: this.i,
                        itemValue: (item.i != null && item.values) ? item.values[item.i] : null,
                        valueIndex: item.i,
                    };
                    if (eventName == 'onItemSelected') {
                        if (e.itemName == 'Купить') {
                            var data = {
                                index: this.items[0].i,
                                count: parseInt(this.items[1].values[this.items[1].i]),
                            };
                            mp.trigger(`callRemote`, `farms.warehouse.products.buy`, JSON.stringify(data));
                        } else if (e.itemName == 'Вернуться') {
                            selectMenu.showByName("farmProducts");
                        }
                    } else if (eventName == 'onBackspacePressed')
                        selectMenu.showByName("farmProducts");
                }
            },
            "farmSoilsWarehouse": {
                name: "farmSoilsWarehouse",
                header: "Склад с удобрением",
                items: [{
                        text: "Загрузка",
                    },
                    {
                        text: "Продажа"
                    },
                    {
                        text: "О складе"
                    },
                    {
                        text: "Закрыть"
                    },
                ],
                i: 0,
                j: 0,
                handler(eventName) {
                    var item = this.items[this.i];
                    var e = {
                        menuName: this.name,
                        itemName: item.text,
                        itemIndex: this.i,
                        itemValue: (item.i != null && item.values) ? item.values[item.i] : null,
                        valueIndex: item.i,
                    };
                    if (eventName == 'onItemSelected') {
                        if (e.itemName == 'Загрузка') {
                            mp.trigger(`callRemote`, `farms.soilsWarehouse.take`);
                        } else if (e.itemName == 'Продажа') {
                            mp.trigger(`callRemote`, `farms.soilsWarehouse.sell`);
                        } else if (e.itemName == 'О складе') {
                            selectMenu.showByName("farmSoilsWarehouseInfo");
                        } else if (e.itemName == 'Закрыть') {
                            selectMenu.show = false;
                        }
                    }
                }
            },
            "farmSoilsWarehouseInfo": {
                name: "farmSoilsWarehouseInfo",
                header: "О складе",
                items: [{
                        text: "Удобрение",
                        values: [`9999 из 9999 ед.`],
                    },
                    {
                        text: "Вернуться"
                    },
                ],
                i: 0,
                j: 0,
                handler(eventName) {
                    var item = this.items[this.i];
                    var e = {
                        menuName: this.name,
                        itemName: item.text,
                        itemIndex: this.i,
                        itemValue: (item.i != null && item.values) ? item.values[item.i] : null,
                        valueIndex: item.i,
                    };
                    if (eventName == 'onItemSelected') {
                        if (e.itemName == 'Вернуться') {
                            selectMenu.showByName("farmSoilsWarehouse")
                        }
                    } else if (eventName == 'onBackspacePressed')
                        selectMenu.showByName("farmSoilsWarehouse");
                }
            },
            "carrierLoad": {
                name: "carrierLoad",
                header: "Грузоперевозчик",
                items: [{
                        text: "Склады",
                    },
                    {
                        text: "Товар",
                    },
                    {
                        text: "Закрыть"
                    },
                ],
                i: 0,
                j: 0,
                handler(eventName) {
                    var item = this.items[this.i];
                    var e = {
                        menuName: this.name,
                        itemName: item.text,
                        itemIndex: this.i,
                        itemValue: (item.i != null && item.values) ? item.values[item.i] : null,
                        valueIndex: item.i,
                    };
                    if (eventName == 'onItemSelected') {
                        if (e.itemName == 'Склады') {
                            selectMenu.showByName("carrierLoadWarehouses");
                        } else if (e.itemName == 'Товар') {
                            selectMenu.showByName("carrierLoadProducts");
                        } else if (e.itemName == 'Закрыть') {
                            selectMenu.show = false;
                        }
                    }
                }
            },
            "carrierLoadWarehouses": {
                name: "carrierLoadWarehouses",
                header: "Склады",
                items: [{
                        text: "Фермы",
                    },
                    {
                        text: "Бизнесы"
                    },
                    {
                        text: "Вернуться"
                    },
                ],
                i: 0,
                j: 0,
                handler(eventName) {
                    var item = this.items[this.i];
                    var e = {
                        menuName: this.name,
                        itemName: item.text,
                        itemIndex: this.i,
                        itemValue: (item.i != null && item.values) ? item.values[item.i] : null,
                        valueIndex: item.i,
                    };
                    if (eventName == 'onItemSelected') {
                        if (e.itemName == 'Фермы') {
                            selectMenu.showByName("carrierLoadFarms");
                        } else if (e.itemName == 'Бизнесы') {
                            // selectMenu.showByName("carrierLoadBizs");
                            notifications.push(`warning`, `In development...`)
                        } else if (e.itemName == 'Вернуться') {
                            selectMenu.showByName("carrierLoad");
                        }
                    } else if (eventName == 'onBackspacePressed')
                        selectMenu.showByName("carrierLoad");
                }
            },
            "carrierLoadFarms": {
                name: "carrierLoadFarms",
                header: "Фермы",
                farms: [{
                        grains: 123,
                        grainsMax: 321,
                        grainPrice: 111,
                        soils: 123,
                        soilsMax: 321,
                        soilPrice: 222,
                    },
                    {
                        grains: 123,
                        grainsMax: 321,
                        grainPrice: 111,
                        soils: 123,
                        soilsMax: 321,
                        soilPrice: 222,
                    }
                ],
                update() {
                    var i = this.items[0].i;
                    Vue.set(this.items[1].values, 0, `${this.farms[i].grains} из ${this.farms[i].grainsMax} ед.`);
                    Vue.set(this.items[2].values, 0, `$${this.farms[i].grainPrice}`);
                    Vue.set(this.items[3].values, 0, `${this.farms[i].soils} из ${this.farms[i].soilsMax} ед.`);
                    Vue.set(this.items[4].values, 0, `$${this.farms[i].soilPrice}`);
                },
                items: [{
                        text: "Ферма",
                        values: ["ID: 1"],
                        i: 0,
                    },
                    {
                        text: "Зерно",
                        values: ["9999 из 9999 ед."],
                    },
                    {
                        text: "Цена зерна",
                        values: ["$999"]
                    },
                    {
                        text: "Удобрение",
                        values: ["9999 из 9999 ед."],
                    },
                    {
                        text: "Цена удобрения",
                        values: ["$999"]
                    },
                    {
                        text: "Вернуться"
                    },
                ],
                i: 0,
                j: 0,
                handler(eventName) {
                    var item = this.items[this.i];
                    var e = {
                        menuName: this.name,
                        itemName: item.text,
                        itemIndex: this.i,
                        itemValue: (item.i != null && item.values) ? item.values[item.i] : null,
                        valueIndex: item.i,
                    };
                    if (eventName == 'onItemSelected') {
                        if (e.itemName == 'Вернуться') {
                            selectMenu.showByName("carrierLoad");
                        }
                    } else if (eventName == 'onItemValueChanged') {
                        if (e.itemName == 'Ферма') {
                            // this.update();
                        }
                    } else if (eventName == 'onBackspacePressed')
                        selectMenu.showByName("carrierLoad");
                }
            },
            "carrierLoadBizs": {
                name: "carrierLoadBizs",
                header: "Бизнесы",
                items: [{
                        text: "Бизнес",
                        values: ["ID: 1", "ID: 2"],
                    },
                    {
                        text: "Выбрать"
                    },
                    {
                        text: "Вернуться"
                    },
                ],
                i: 0,
                j: 0,
                handler(eventName) {
                    var item = this.items[this.i];
                    var e = {
                        menuName: this.name,
                        itemName: item.text,
                        itemIndex: this.i,
                        itemValue: (item.i != null && item.values) ? item.values[item.i] : null,
                        valueIndex: item.i,
                    };
                    if (eventName == 'onItemSelected') {
                        if (e.itemName == 'Вернуться') {
                            selectMenu.showByName("carrierLoad");
                        }
                    } else if (eventName == 'onBackspacePressed')
                        selectMenu.showByName("carrierLoad");
                }
            },
            "carrierLoadProducts": {
                name: "carrierLoadProducts",
                header: "Товар",
                items: [{
                        text: "Тип товара",
                        values: ["Зерно", "Удобрение"]
                    },
                    {
                        text: "Количество",
                        values: [""],
                        type: "editable"
                    },
                    {
                        text: "Купить",
                        values: ["$999"]
                    },
                    {
                        text: "Списать",
                        values: ["-999%"]
                    },
                    {
                        text: "Вернуться"
                    },
                ],
                i: 0,
                j: 0,
                handler(eventName) {
                    var item = this.items[this.i];
                    var e = {
                        menuName: this.name,
                        itemName: item.text,
                        itemIndex: this.i,
                        itemValue: (item.i != null && item.values) ? item.values[item.i] : null,
                        valueIndex: item.i,
                    };

                    if (eventName == 'onItemSelected') {
                        if (e.itemName == 'Купить') {
                            var product = this.items[0].i;
                            var count = this.items[1].values[0];
                            if (isNaN(count)) return notifications.push(`error`, `Требуется число`);
                            if (count <= 0) return notifications.push(`error`, `Требуется положительное число`);
                            var data = {
                                count: parseInt(count),
                                product: product
                            };
                            selectMenu.loader = true;
                            mp.trigger(`callRemote`, `carrier.load.products.buy`, JSON.stringify(data));
                        } else if (e.itemName == 'Списать') {
                            selectMenu.loader = true;
                            mp.trigger(`callRemote`, `carrier.load.products.sell`);
                        } else if (e.itemName == 'Вернуться') {
                            selectMenu.showByName("carrierLoad");
                        }
                    } else if (eventName == 'onBackspacePressed' && this.i != 1)
                        selectMenu.showByName("carrierLoad");
                }
            },
            "carrierJob": {
                name: "carrierJob",
                header: "Работа грузоперевозчика",
                items: [{
                        text: "Устроиться",
                    },
                    {
                        text: "Уволиться",
                    },
                    {
                        text: "Помощь"
                    },
                    {
                        text: "Закрыть"
                    },
                ],
                i: 0,
                j: 0,
                handler(eventName) {
                    var item = this.items[this.i];
                    var e = {
                        menuName: this.name,
                        itemName: item.text,
                        itemIndex: this.i,
                        itemValue: (item.i != null && item.values) ? item.values[item.i] : null,
                        valueIndex: item.i,
                    };
                    if (eventName == 'onItemSelected') {
                        if (e.itemName == 'Устроиться') {
                            mp.trigger(`callRemote`, `carrier.job.start`);
                        } else if (e.itemName == 'Уволиться') {
                            mp.trigger(`callRemote`, `carrier.job.stop`);
                        } else if (e.itemName == 'Помощь') {

                        } else if (e.itemName == 'Закрыть') {
                            selectMenu.show = false;
                        }
                    }
                }
            },
            "maskShop": {
                name: "maskShop",
                header: "Магазин масок",
                items: [],
                i: 0,
                j: 0,
                handler(eventName) {
                    var item = this.items[this.i];
                    var e = {
                        menuName: this.name,
                        itemName: item.text,
                        itemIndex: this.i,
                        itemValue: (item.i != null && item.values) ? item.values[item.i] : null,
                        valueIndex: item.i,
                    };
                    if (eventName == 'onItemSelected') {
                        if (e.itemName == 'Выйти') {
                            mp.trigger('masks.shop.exit');
                        } else {
                            mp.trigger('masks.buy', e.itemIndex, e.valueIndex);
                            selectMenu.loader = true;
                        }
                    }
                    if (eventName == 'onItemFocusChanged') {
                        if (e.itemName != 'Выйти') {
                            mp.trigger('masks.set', e.itemIndex, e.valueIndex);
                        }
                    }
                    if (eventName == 'onItemValueChanged') {
                        mp.trigger('masks.set', e.itemIndex, e.valueIndex);
                    }
                    if (eventName == 'onBackspacePressed' || eventName == 'onEscapePressed')
                        mp.trigger('masks.shop.exit');
                }
            },
            "barbershopMain": {
                name: "barbershopMain",
                header: "Парикмахерская",
                items: [],
                i: 0,
                j: 0,
                handler(eventName) {
                    var item = this.items[this.i];
                    var e = {
                        menuName: this.name,
                        itemName: item.text,
                        itemIndex: this.i,
                        itemValue: (item.i != null && item.values) ? item.values[item.i] : null,
                        valueIndex: item.i,
                    };
                    if (eventName == 'onItemSelected') {
                        if (e.itemName == 'Выйти') {
                            mp.trigger('barbershop.exit');
                        }
                        if (e.itemName == 'Прически') {
                            mp.trigger('barbershop.hairstylesMenu.show');
                        }
                        if (e.itemName == 'Растительность на лице') {
                            mp.trigger('barbershop.facialHairMenu.show');
                        }
                        if (e.itemName == 'Цвет волос') {
                            mp.trigger('barbershop.colorMenu.show', 0);
                        }
                        if (e.itemName == 'Доп. цвет волос') {
                            mp.trigger('barbershop.colorMenu.show', 1);
                        }
                        if (e.itemName == 'Цвет растительности на лице') {
                            mp.trigger('barbershop.colorMenu.show', 2);
                        }
                    }

                    if (eventName == 'onBackspacePressed' || eventName == 'onEscapePressed')
                        mp.trigger('barbershop.exit');
                }
            },
            "barbershopHairstyles": {
                name: "barbershopHairstyles",
                header: "Прически",
                items: [],
                i: 0,
                j: 0,
                handler(eventName) {
                    var item = this.items[this.i];
                    var e = {
                        menuName: this.name,
                        itemName: item.text,
                        itemIndex: this.i,
                        itemValue: (item.i != null && item.values) ? item.values[item.i] : null,
                        valueIndex: item.i,
                    };

                    if (eventName == 'onItemFocusChanged') {
                        if (e.itemName != 'Назад') {
                            mp.trigger('barbershop.hairstyle.set', e.itemIndex);
                        }
                    }
                    if (eventName == 'onItemSelected') {
                        if (e.itemName == 'Назад') {
                            mp.trigger('barbershop.mainMenu.show');
                        } else {
                            mp.trigger('barbershop.hairstyle.buy', e.itemIndex);
                        }
                    }

                    if (eventName == 'onBackspacePressed' || eventName == 'onEscapePressed')
                        mp.trigger('barbershop.mainMenu.show');
                }
            },
            "barbershopFacialHair": {
                name: "barbershopFacialHair",
                header: "Растительность",
                items: [],
                i: 0,
                j: 0,
                handler(eventName) {
                    var item = this.items[this.i];
                    var e = {
                        menuName: this.name,
                        itemName: item.text,
                        itemIndex: this.i,
                        itemValue: (item.i != null && item.values) ? item.values[item.i] : null,
                        valueIndex: item.i,
                    };

                    if (eventName == 'onItemFocusChanged') {
                        if (e.itemName != 'Назад') {
                            mp.trigger('barbershop.facialHair.set', e.itemIndex);
                        }
                    }
                    if (eventName == 'onItemSelected') {
                        if (e.itemName == 'Назад') {
                            mp.trigger('barbershop.mainMenu.show');
                        } else {
                            mp.trigger('barbershop.facialHair.buy', e.itemIndex);
                        }
                    }

                    if (eventName == 'onBackspacePressed' || eventName == 'onEscapePressed')
                        mp.trigger('barbershop.mainMenu.show');
                }
            },
            "barbershopColor": {
                name: "barbershopColor",
                header: "Выбор цвета",
                items: [{
                        text: 'Цвета',
                        values: []
                    },
                    {
                        text: 'Применить',
                        values: ['$100']

                    },
                    {
                        text: 'Назад'

                    },
                ],
                i: 0,
                j: 0,
                hairIndex: 0,
                handler(eventName) {
                    var item = this.items[this.i];
                    var e = {
                        menuName: this.name,
                        itemName: item.text,
                        itemIndex: this.i,
                        itemValue: (item.i != null && item.values) ? item.values[item.i] : null,
                        valueIndex: item.i,
                    };

                    if (eventName == 'onItemValueChanged') {
                        this.hairIndex = e.valueIndex;
                        mp.trigger('barbershop.color.set', e.valueIndex);
                    }
                    if (eventName == 'onItemSelected') {
                        if (e.itemName == 'Назад') {
                            mp.trigger('barbershop.mainMenu.show');
                        }
                        if (e.itemName == 'Применить') {
                            mp.trigger('barbershop.color.buy', this.hairIndex);
                        }
                    }

                    if (eventName == 'onBackspacePressed' || eventName == 'onEscapePressed')
                        mp.trigger('barbershop.mainMenu.show');
                }
            },
        },
        // Уведомление
        notification: null,
        // Время показа уведомления
        showNotifTime: 10000,
        // Таймер показа уведомления
        showNotifTimer: null,
        // Показ колесика загрузка
        loader: false,
    },
    methods: {
        onKeyUp(e) {
            if (!this.show || this.loader) return;
            if (e.keyCode == 38) { // UP
                if (this.menu.i == 0) return;
                this.menu.i = Math.clamp(this.menu.i - 1, 0, this.menu.items.length - 1);
                if (this.menu.i < this.menu.j) this.menu.j--;
                this.onItemFocusChanged();
            } else if (e.keyCode == 40) { // DOWN
                if (this.menu.i == this.menu.items.length - 1) return;
                this.menu.i = Math.clamp(this.menu.i + 1, 0, this.menu.items.length - 1);
                if (this.menu.i - this.menu.j == this.maxItems) this.menu.j++;
                this.onItemFocusChanged();
            } else if (e.keyCode == 37) { // LEFT
                var item = this.menu.items[this.menu.i];
                if (!item.values || item.i == 0) return;
                item.i = Math.clamp(item.i - 1, 0, item.values.length - 1);
                if (item.i < item.j) item.j--;
                this.onItemValueChanged();
            } else if (e.keyCode == 39) { // RIGHT
                var item = this.menu.items[this.menu.i];
                if (!item.values || item.i == item.values.length - 1) return;
                item.i = Math.clamp(item.i + 1, 0, item.values.length - 1);
                if (item.i - item.j == this.maxColorValues) item.j++;
                this.onItemValueChanged();
            } else if (e.keyCode == 13) { // ENTER
                this.onItemSelected();
            } else if (e.keyCode == 8) { // BACKSPACE
                this.onBackspacePressed();
            } else if (e.keyCode == 27) { // ESCAPE
                this.onEscapePressed();
            }
        },
        isItemShow(index) {
            return index >= this.menu.j && index <= this.menu.j + this.maxItems - 1;
        },
        isValueShow(index) {
            var i = this.menu.items[this.menu.i].i;
            return index <= 2;
        },
        isColorValueShow(index) {
            var item = this.menu.items[this.menu.i];
            return index >= item.j && index <= item.j + this.maxColorValues - 1;
        },
        valuesType(index) {
            // 0 - обычное значение, 1 - цвет, 2 - ползунок, 3 - ввод текста, -1 - нет значений
            var values = this.menu.items[index].values;
            if (this.menu.items[index].type == "editable") return 3;
            if (!values || values[0] === "") return -1;
            if (values[0][0] == '#') return 1;
            for (var i = 0; i < values.length; i++) {
                var value = values[i];
                if (typeof value != 'number') return 0;
            }
            return 2;
        },
        // ************** События взаимодействия с меню **************
        // Выбран пункт меню
        onItemSelected() {
            this.menu.handler("onItemSelected");
        },
        // Изменено значение пункта меню
        onItemValueChanged() {
            this.menu.handler("onItemValueChanged");
        },
        // Изменен фокус пункта меню
        onItemFocusChanged() {
            this.menu.handler("onItemFocusChanged");
        },
        // Нажата клавиша 'Назад'
        onBackspacePressed() {
            this.menu.handler("onBackspacePressed");
        },
        onEscapePressed() {
            this.menu.handler("onEscapePressed");
        },
        showByName(menuName) {
            var menu = this.menus[menuName];
            if (!menu) return;
            this.menu = menu;
            this.show = true;
        },
        setItemValues(menuName, itemName, values) {
            if (typeof values == 'string') values = JSON.parse(values);
            var menu = this.menus[menuName];
            if (!menu) return;
            var item = this.getItemByName(itemName, menu.items);
            if (!item) return;
            Vue.set(item, 'values', values);
        },
        setItems(menuName, items) {
            if (typeof items == 'string') items = JSON.parse(items);
            var menu = this.menus[menuName];
            if (!menu) return;
            items.forEach((item) => {
                if (item.i == null) Vue.set(item, 'i', 0);
                if (item.j == null) Vue.set(item, 'j', 0);
                if (!item.values) Vue.set(item, 'values', [""]);
            });
            Vue.set(menu, 'items', items);
            menu.i = 0;
        },
        getItemByName(name, items) {
            for (var i = 0; i < items.length; i++) {
                var item = items[i];
                if (item.text == name) return item;
            }
            return null;
        },
        addItem(menuName, item, index) {
            var menu = this.menus[menuName];
            if (!menu) return;
            if (typeof item == 'string') item = JSON.parse(item);
            if (this.getItemByName(item.text, menu.items)) return;
            if (item.i == null) Vue.set(item, 'i', 0);
            if (item.j == null) Vue.set(item, 'j', 0);
            if (!item.values) Vue.set(item, 'values', [""]);

            menu.items.splice(index, 0, item);
            menu.i = 0;
            menu.j = 0;
        },
        deleteItem(menuName, itemName) {
            var menu = this.menus[menuName];
            if (!menu) return;
            var items = menu.items;
            for (var i = 0; i < items.length; i++) {
                var item = items[i];
                if (item.text == itemName) {
                    items.splice(i, 1);
                    i--;
                }
            }
        },
        setProp(menuName, propName, propValue) {
            var menu = this.menus[menuName];
            if (!menu) return;
            if (typeof propValue == 'string') propValue = JSON.parse(propValue);
            Vue.set(menu, propName, propValue);
            if (menu.update) menu.update();
        },
        // open() {
        //     this.menu.i = 0; // TEMP, нужно разобраться, почему i/j остаются прежними при закрытии/открытии меню
        //     this.menu.j = 0;
        //     this.show = true;
        // },
        // close() {
        //     this.menu = null;
        // }
    },
    computed: {
        items() {
            if (!this.menu) return null;
            var items = this.menu.items.slice(0);
            return items;
        },
        values() {
            if (!this.menu) return null;
            var i = this.menu.items[this.menu.i].i;
            var values = this.menu.items[this.menu.i].values;
            if (!values) return null;
            var result = [values[i - 1] || "", values[i], values[i + 1] || ""];
            return result;
        },
        leftNumberType() {
            var offset = 3.5; // половина от ширины шарика ползунка
            if (this.menu.items[this.menu.i].i == 0) return 0 - offset + '%';
            var values = this.menu.items[this.menu.i].values;
            var maxValue = values[values.length - 1];
            var curValue = values[this.menu.items[this.menu.i].i];
            return curValue / maxValue * 100 - offset + '%';
        },
        headerStyles() {
            return {
                background: `url('img/selectMenu/headers/${this.menu.headerImg}')`,
                backgroundSize: `contain`,
                borderRadius: `1vh 1vh 0 0`,
                height: `10vh`,
            };
        },
    },
    watch: {
        notification(val, oldVal) {
            clearTimeout(this.showNotifTimer);
            this.showNotifTimer = setTimeout(() => {
                this.notification = null;
            }, this.showNotifTime);
        },
        'menu.i': function(val) {
            setTimeout(() => {
                if (this.valuesType(val) == 3) { // editable
                    var itemText = this.menu.items[val].text;
                    if (this.$refs[itemText]) this.$refs[itemText].focus();
                }
            }, 100);
        },
        menu(val) {
            if (val.i == null) Vue.set(this.menu, 'i', 0);
            if (val.j == null) Vue.set(this.menu, 'j', 0);
            val.items.forEach((item) => {
                if (item.i == null) Vue.set(item, 'i', 0);
                if (item.j == null) Vue.set(item, 'j', 0);
                if (!item.values) Vue.set(item, 'values', [""]);
            });
        },
        show(val) {
            if (val) busy.add("selectMenu", true);
            else busy.remove("selectMenu", true);
        },
    },
    mounted() {
        let self = this;
        window.addEventListener('keydown', function(e) {
            if (!self.menu) return;
            if (busy.includes(["inventory", "chat", "terminal", "phone"])) return;
            self.onKeyUp(e);
        });
    }
});

// for tests
// Для своего меню необходимо создать след. структуру (комментарии внутри):
/*var testMenu = {
    name: "test", // название меню, необходимо для отловки событий
    // header: "Меню выбора", // заголовок меню, видимый на экране
    headerImg: "ammunation.png",
    items: [{
            text: "Выборочный тип 1", // текст пункта меню, видимый на экране
            // если ОДНО ИЗ значений начинается с '#', то снизу появится селектор цветов
            // если ВСЕ значения - числа, то снизу появится селектор с ползунком
            // в любом другом случае, появится обычный селектор со значениями
            values: ['Выбор 1', 'Выбор 2', 'Выбор 3', 'Выбор 4', 'Выбор 5', 'Выбор 6'], // доступные значения пункта меню
            // i: 0, // индекс выбранного значения пункта меню (необяз.)
        },
        {
            text: "Ввод 1",
            values: ["Текст 1"],
            // i: 0,
            type: "editable" // возможность редактирования значения пункта меню
        },
        {
            text: "Выбор цвета 2",
            values: ['#0bf', '#fb0', '#bf0', '#fb0', '#fb0', '#fb0', '#bf0', '#0fe', '#cd3', 'yellow', 'pink'],
            // i: 0, // индекс выбранного значения пункта меню (необяз.)
            // j: 0, // индекс первого видимого значения пункта меню (актуально только для цветов) (необяз.)
        },
        {
            text: "Ползунок 2.5",
            values: [0, 10, 20, 30, 40, 50],
            // i: 0,
            min: "Минимум", // слово слева от ползунка
            max: "Максимум", // слово справа от ползунка
        },
        {
            text: "Ввод 2",
            values: ["Текст 2"],
            // i: 0,
            type: "editable" // возможность редактирования значения пункта меню
        },
        {
            text: "Ползунок 3.5",
            values: [0, 5, 10, 15, 20, 25, 30, 35, 40, 45, 50, 100],
            // i: 0,
            min: "Округлые", // слово слева от ползунка
            max: "Впалые", // слово справа от ползунка
        },
        {
            text: "Выборочный тип 4",
            values: ['Выбор 1', 'Выбор 2', 'Выбор 3'],
            // i: 0,
        },
        {
            text: "Выбор цвета 5",
            values: ['#0bf', '#fb0', '#bf0'],
            // i: 0, // индекс выбранного значения пункта меню
            // j: 0, // индекс первого видимого значения пункта меню (актуально только для цветов)
        },
        {
            text: "Центр",
            location: "center" // расположение кнопки (left | center | right)
        },
        {
            text: "Справа",
            location: "right" // расположение кнопки (left | center | right)
        },
        {
            text: "Выборочный тип 7",
            values: ['Выбор 1'],
            // i: 0,
        },
        {
            text: "Выбор цвета 8",
            values: ['#0bf', '#fb0', '#bf0'],
            // i: 0, // индекс выбранного значения пункта меню
            // j: 0, // индекс первого видимого значения пункта меню (актуально только для цветов)
        },
        {
            text: "Обычный тип 9",
        },
    ],
    // i: 1, // индекс выбранного пункта (необяз.)
    // j: 0, // индекс первого видимого пункта (необяз.)
    handler(eventName) { // обработчик взаимодействия с меню
        var item = this.items[this.i];
        var e = {
            menuName: this.name, // название меню
            itemName: item.text, // текст пункта меню
            itemIndex: this.i, // индекс пункта меню
            itemValue: (item.i != null && item.values) ? item.values[item.i] : null, // значение пункта меню
            valueIndex: item.i, // индекс значения пункта меню
        };
        console.log(`Событие: ${eventName}`);
        console.log(e);
    }
};
// Далее, присвоить эту структуру модулю selectMenu:
selectMenu.menu = testMenu;
// Показываем меню:
selectMenu.show = true;
selectMenu.notification = "Здесь короче тестовое уведомление. У Вас неправильный ник или город прописки!";*/
// selectMenu.loader = true/false - включить/выключить колесико загрузки
